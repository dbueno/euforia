; filename: "../../vmt2/examples/badrefine_false.c"
(set-info :source |Printed by VMT_Standalone 0.1 [taco]|)
; state variable decarations
(declare-fun %call1-main* () (_ BitVec 32))
(declare-fun %call1-main*+ () (_ BitVec 32))
(declare-fun @L6* () Bool)
(declare-fun @L6*+ () Bool)
(declare-fun @L4* () Bool)
(declare-fun @L4*+ () Bool)
(declare-fun @L3* () Bool)
(declare-fun @L3*+ () Bool)
(declare-fun %call-main* () (_ BitVec 32))
(declare-fun %call-main*+ () (_ BitVec 32))
(declare-fun @L0* () Bool)
(declare-fun @L0*+ () Bool)
; aux variable declarations
(declare-fun %sub-main () (_ BitVec 32))
(declare-fun %inc.call-main () (_ BitVec 32))
(declare-fun %tobool2-main () Bool)
(declare-fun %tobool-main () Bool)
(declare-fun @L5 () Bool)
(declare-fun %inc-main () (_ BitVec 32))
(declare-fun @L1 () Bool)
(declare-fun @L2 () Bool)
(declare-fun %tobool4-main () Bool)
; input variable decarations
(declare-fun call1-$Y32-1 () (_ BitVec 32))
(declare-fun call-$Y32-0 () (_ BitVec 32))
; :next defs for state vars
(define-fun .def0 () (_ BitVec 32) (! %call1-main* :next %call1-main*+))
(define-fun .def1 () Bool (! @L6* :next @L6*+))
(define-fun .def2 () Bool (! @L4* :next @L4*+))
(define-fun .def3 () Bool (! @L3* :next @L3*+))
(define-fun .def4 () (_ BitVec 32) (! %call-main* :next %call-main*+))
(define-fun .def5 () Bool (! @L0* :next @L0*+))
; initial state
(define-fun .def6 () Bool (= %call-main* #x00000000))
(define-fun .def7 () Bool (= %call1-main* #x00000000))
(define-fun .def8 () Bool (not @L3*))
(define-fun .def9 () Bool (not @L4*))
(define-fun .def10 () Bool (not @L6*))
(define-fun .def11 () Bool (and @L0* .def10 .def9 .def8 .def7 .def6))
(define-fun .def12 () Bool (! .def11 :init true))
; transition relation
(define-fun .def13 () Bool (= %call-main*+ %call-main*))
(define-fun .def14 () Bool (or @L1 .def13))
(define-fun .def15 () Bool (= %call1-main*+ %call1-main*))
(define-fun .def16 () Bool (or @L1 .def15))
(define-fun .def17 () Bool (or @L3* @L6*))
(define-fun .def18 () Bool (= @L6*+ .def17))
(define-fun .def19 () Bool (and @L4* %tobool4-main))
(define-fun .def20 () Bool (= @L5 .def19))
(define-fun .def21 () Bool (= %inc.call-main #x00000000))
(define-fun .def22 () Bool (not .def21))
(define-fun .def23 () Bool (= %tobool4-main .def22))
(define-fun .def24 () Bool (or @L2 @L5))
(define-fun .def25 () Bool (= @L4*+ .def24))
(define-fun .def26 () Bool (not %tobool4-main))
(define-fun .def27 () Bool (and @L4* .def26))
(define-fun .def28 () Bool (not %tobool2-main))
(define-fun .def29 () Bool (and @L1 .def28))
(define-fun .def30 () Bool (or .def29 .def27))
(define-fun .def31 () Bool (= @L3*+ .def30))
(define-fun .def32 () Bool (and @L1 %tobool2-main))
(define-fun .def33 () Bool (= @L2 .def32))
(define-fun .def34 () Bool (= %call-main*+ call-$Y32-0))
(define-fun .def35 () Bool (not @L1))
(define-fun .def36 () Bool (or .def35 .def34))
(define-fun .def37 () Bool (= %call1-main*+ call1-$Y32-1))
(define-fun .def38 () Bool (or .def35 .def37))
(define-fun .def39 () Bool (= %sub-main #x00000000))
(define-fun .def40 () Bool (not .def39))
(define-fun .def41 () Bool (= %tobool2-main .def40))
(define-fun .def42 () (_ BitVec 32) (ite @L1 call-$Y32-0 %call-main*))
(define-fun .def43 () (_ BitVec 32) (ite %tobool-main %inc-main .def42))
(define-fun .def44 () Bool (= %inc.call-main .def43))
(define-fun .def45 () Bool (= .def42 #x00000000))
(define-fun .def46 () Bool (not .def45))
(define-fun .def47 () Bool (= %tobool-main .def46))
(define-fun .def48 () (_ BitVec 32) (bvadd #x00000001 .def42))
(define-fun .def49 () Bool (= %inc-main .def48))
(define-fun .def50 () (_ BitVec 32) (ite @L1 call1-$Y32-1 %call1-main*))
(define-fun .def51 () (_ BitVec 32) (bvadd #xfffffff8 .def50))
(define-fun .def52 () Bool (= %sub-main .def51))
(define-fun .def53 () Bool (= @L1 @L0*))
(define-fun .def54 () Bool (not @L0*+))
(define-fun .def55 () Bool (and .def54 .def53))
(define-fun .def56 () Bool (and .def55 .def52))
(define-fun .def57 () Bool (and .def56 .def49))
(define-fun .def58 () Bool (and .def57 .def47))
(define-fun .def59 () Bool (and .def58 .def44))
(define-fun .def60 () Bool (and .def59 .def41))
(define-fun .def61 () Bool (and .def60 .def38))
(define-fun .def62 () Bool (and .def61 .def36))
(define-fun .def63 () Bool (and .def62 .def33))
(define-fun .def64 () Bool (and .def63 .def31))
(define-fun .def65 () Bool (and .def64 .def25))
(define-fun .def66 () Bool (and .def65 .def23))
(define-fun .def67 () Bool (and .def66 .def20))
(define-fun .def68 () Bool (and .def67 .def18))
(define-fun .def69 () Bool (and .def68 .def16))
(define-fun .def70 () Bool (and .def69 .def14))
(define-fun .def71 () Bool (! .def70 :trans true))
; property
(define-fun .def72 () Bool (! .def8 :invar-property 0))
(assert true)
