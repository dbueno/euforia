(declare-fun at-b@c.d () Bool)
(declare-fun at-b@c.d+ () Bool)
(define-fun e () Bool (! at-b@c.d :next at-b@c.d+) )
(declare-fun at-b@g.h () Bool)
(declare-fun at-b@g.h+ () Bool)
(define-fun i () Bool (! at-b@g.h :next at-b@g.h+))
(declare-fun f-place-7 () (_ BitVec 64))
(declare-fun f-place-7+ () (_ BitVec 64))
(define-fun j () (_ BitVec 4) (! f-place-7 :next f-place-7+))
(declare-fun arr-f-f-place-3 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun arr-f-f-place-3+ () (Array (_ BitVec 64) (_ BitVec 64)))
(define-fun k () (Array (_ BitVec 4) (_ BitVec 4)) (! arr-f-f-place-3 :next arr-f-f-place-3+))
(declare-fun arr-f-f-place-2 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun arr-f-f-input-81 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun bool-input-31 () Bool)
(declare-fun bool-input-5 () Bool)
(declare-fun bool-input-38 () Bool)
(declare-fun r-5 () Bool)
(declare-fun f-input-20 () (_ BitVec 64))
(declare-fun f-input-19 () (_ BitVec 64 ) )
(declare-fun arr-f-f-input-3 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun arr-f-f-input-4 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun bool-input-6 () Bool)
(declare-fun r-4 () Bool )
(declare-fun f-input-7 () (_ BitVec 64 ) )
(declare-fun bool-input-15 () Bool)
(declare-fun arr-f-f-input-13 () (Array (_ BitVec 64) (_ BitVec 64) ) )
(declare-fun f-input-18 () (_ BitVec 64))
(declare-fun arr-f-f-input-9 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun r-7 () Bool)
(declare-fun r-8 () Bool)
(declare-fun r-9 () Bool)
(declare-fun arr-f-f-input-17 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun r-10 () Bool)
(declare-fun r-6 () Bool)
(define-fun l () Bool (! (and (not at-b@g.h) (not at-b@c.d)) :init m))
(define-fun n () Bool (! (let ((a!12 (ite r-10 f-place-7 (ite r-9 f-input-20 (ite r-5 f-place-7 (ite r-4 f-input-7 f-place-7))))) 
                               (a!23 (ite r-7 arr-f-f-place-3 (ite r-6 arr-f-f-input-3 (ite r-5 arr-f-f-place-2 (ite r-4 arr-f-f-input-3 arr-f-f-place-3)))))
                               (a!31 (and (= (= arr-f-f-input-4 ((as const (Array (_ BitVec 64) (_ BitVec 64))) 
                                                                 #x0000000000000000))
                                             bool-input-15 
                                             (= f-input-18 f-place-7 f-input-19 (select arr-f-f-place-3 f-input-18))
                                             (= bool-input-31 (= f-input-19 #x0000000000000000) bool-input-38))
                                          at-b@c.d))
                               (a!37 (and (= arr-f-f-input-9 (store arr-f-f-input-4 f-input-20 #x0000000000000000))
                                          (= bool-input-5 (and bool-input-6))
                                          bool-input-5
                                          (= (= arr-f-f-input-13 arr-f-f-input-9) (and bool-input-6) (= arr-f-f-input-17 arr-f-f-input-13)))))
                           (let ((a!24 (= arr-f-f-place-3+ (ite r-10 arr-f-f-input-81 (ite r-9 arr-f-f-input-17 (ite r-8 arr-f-f-input-3 a!23)))))) 
                             (and (= f-place-7+ a!12)
                                  a!24
                                  (= at-b@g.h+ a!31 r-10)
                                  (= r-9 a!37)))) :trans m))
(define-fun o () Bool (! (not at-b@g.h) :invar-property 0))

