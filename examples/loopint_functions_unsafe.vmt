; 8 rules
; 5 relations
; 12 state vars
(declare-fun B-place-0 () (_ BitVec 32))
(declare-fun B-place-0+ () (_ BitVec 32))
(define-fun .def0 () (_ BitVec 32) (! B-place-0 :next B-place-0+))
(declare-fun D-place-0 () (_ BitVec 32))
(declare-fun D-place-0+ () (_ BitVec 32))
(define-fun .def1 () (_ BitVec 32) (! D-place-0 :next D-place-0+))
(declare-fun F-place-0 () (_ BitVec 32))
(declare-fun F-place-0+ () (_ BitVec 32))
(define-fun .def2 () (_ BitVec 32) (! F-place-0 :next F-place-0+))
(declare-fun F-place-1 () (_ BitVec 32))
(declare-fun F-place-1+ () (_ BitVec 32))
(define-fun .def3 () (_ BitVec 32) (! F-place-1 :next F-place-1+))
(declare-fun G-place-0 () (_ BitVec 32))
(declare-fun G-place-0+ () (_ BitVec 32))
(define-fun .def4 () (_ BitVec 32) (! G-place-0 :next G-place-0+))
(declare-fun G-place-1 () (_ BitVec 32))
(declare-fun G-place-1+ () (_ BitVec 32))
(define-fun .def5 () (_ BitVec 32) (! G-place-1 :next G-place-1+))
(declare-fun G-place-2 () (_ BitVec 32))
(declare-fun G-place-2+ () (_ BitVec 32))
(define-fun .def6 () (_ BitVec 32) (! G-place-2 :next G-place-2+))
(declare-fun at-B () Bool)
(declare-fun at-B+ () Bool)
(define-fun .def7 () Bool (! at-B :next at-B+))
(declare-fun at-D () Bool)
(declare-fun at-D+ () Bool)
(define-fun .def8 () Bool (! at-D :next at-D+))
(declare-fun at-F () Bool)
(declare-fun at-F+ () Bool)
(define-fun .def9 () Bool (! at-F :next at-F+))
(declare-fun at-G () Bool)
(declare-fun at-G+ () Bool)
(define-fun .def10 () Bool (! at-G :next at-G+))
(declare-fun at-U () Bool)
(declare-fun at-U+ () Bool)
(define-fun .def11 () Bool (! at-U :next at-U+))
; 13 inputs
(declare-fun bv32-input-0 () (_ BitVec 32))
(declare-fun bv32-input-1 () (_ BitVec 32))
(declare-fun bv32-input-2 () (_ BitVec 32))
(declare-fun cmdr!0 () Bool)
(declare-fun cmdr!1 () Bool)
(declare-fun r-0 () Bool)
(declare-fun r-1 () Bool)
(declare-fun r-2 () Bool)
(declare-fun r-3 () Bool)
(declare-fun r-4 () Bool)
(declare-fun r-5 () Bool)
(declare-fun r-6 () Bool)
(declare-fun r-7 () Bool)
(define-fun .def12 () Bool (! (and (not at-B) (not at-D) (not at-G) (not at-U) (not at-F)) :init true))
(define-fun .def13 () Bool (! (and (= at-G+ (or r-3 r-4 at-G))
     (or (not cmdr!0) (not cmdr!1))
     (= at-D+ (or r-2 at-D))
     (or (not r-5) (not r-7))
     (or (not r-5) (not r-6))
     (or (not r-5) (not r-3))
     (or (not r-5) cmdr!0)
     (or (not r-7) (not r-6))
     (or (not r-7) (not r-3))
     (or (not r-7) cmdr!0)
     (or (not r-6) (not r-3))
     (or (not r-6) cmdr!0)
     (or (not r-3) cmdr!0)
     (or (not r-1) (not r-2))
     (or (not r-1) (not r-4))
     (or (not r-1) (not r-0))
     (or (not r-1) cmdr!1)
     (or (not r-2) (not r-4))
     (or (not r-2) (not r-0))
     (or (not r-2) cmdr!1)
     (or (not r-4) (not r-0))
     (or (not r-4) cmdr!1)
     (or (not r-0) cmdr!1)
     (= D-place-0+ (ite r-2 B-place-0 D-place-0))
     (= G-place-0+ (ite r-4 G-place-0 (ite r-3 bv32-input-0 G-place-0)))
     (= G-place-1+
        (ite r-4 (bvadd G-place-1 #x00000001) (ite r-3 bv32-input-1 G-place-1)))
     (= at-F+ (or at-F r-5))
     (= G-place-2+
        (ite r-4 (bvadd G-place-2 #x00000001) (ite r-3 bv32-input-2 G-place-2)))
     (= at-U+ (or r-6 at-U))
     (= F-place-0+ (ite r-5 G-place-0 F-place-0))
     (= B-place-0+ (ite r-1 F-place-1 (ite r-0 bv32-input-0 B-place-0)))
     (= at-B+ (or r-0 at-B r-1))
     (= F-place-1+ (ite r-5 G-place-1 F-place-1))
     (=> r-6 (and (bvsge D-place-0 #x00000006) at-D (= D-place-0 D-place-0)))
     (=> r-5
         (and (bvsge G-place-2 #x00000003)
              at-G
              (= G-place-0 G-place-0)
              (= G-place-1 G-place-1)
              (= G-place-2 G-place-2)))
     (=> r-4
         (and (bvslt G-place-2 #x00000003)
              at-G
              (= G-place-0 G-place-0)
              (= G-place-1 G-place-1)
              (= G-place-2 G-place-2)))
     (=> r-3 (and (= bv32-input-0 bv32-input-1) (= bv32-input-2 #x00000000)))
     (=> r-2 (and (bvsge B-place-0 #x00000005) at-B (= B-place-0 B-place-0)))
     (=> r-0 (= bv32-input-0 #x00000000))
     (=> r-1
         (and (bvslt F-place-0 #x00000005)
              at-B
              (= F-place-0 B-place-0)
              at-F
              (= F-place-0 F-place-0)
              (= F-place-1 F-place-1)))) :trans true))
(define-fun .def14 () Bool (! (not at-U) :invar-property 0))
