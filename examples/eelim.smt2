; 
(set-info :status unknown)
(declare-fun %new.0-main* () (_ BitVec 32))
(declare-fun %call-main* () (_ BitVec 32))
(declare-fun %LOCK.1-main* () (_ BitVec 32))
(declare-fun %new.1-main* () (_ BitVec 32))
(declare-fun %LOCK.0-main* () (_ BitVec 32))
(declare-fun @L5* () Bool)
(declare-fun @L0* () Bool)
(declare-fun @L2* () Bool)
(declare-fun @L10* () Bool)
(declare-fun @L15* () Bool)
(declare-fun @L8* () Bool)
(declare-fun @L14* () Bool)
(declare-fun @L6* () Bool)
(assert
 (exists ((%new.1-main*v4 (_ BitVec 32)) (%inc-mainv0 (_ BitVec 32)) (@L9v1 Bool) (%LOCK.1-main*v3 (_ BitVec 32)) (@L2*v3 Bool) (%cmp.i3-mainv4 Bool) (%new.1-main*v3 (_ BitVec 32)) (@L15*v2 Bool) (@L10*v4 Bool) (@L12v2 Bool) (%LOCK.1-main*v4 (_ BitVec 32)) (%cmp.i1-mainv2 Bool) (%call-main*v1 (_ BitVec 32)) (%new.0-main*v2 (_ BitVec 32)) (%new.1-main*v2 (_ BitVec 32)) (@L4v1 Bool) (@L0*v4 Bool) (%LOCK.0-main*v4 (_ BitVec 32)) (%LOCK.1-main*v2 (_ BitVec 32)) (@L6*v4 Bool) (%new.1-main*v1 (_ BitVec 32)) (@L4v2 Bool) (@L4v0 Bool) (%cmp.i1-mainv4 Bool) (%LOCK.0-main*v3 (_ BitVec 32)) (@L14*v0 Bool) (@L1v2 Bool) (%new.0-main*v4 (_ BitVec 32)) (@L2*v4 Bool) (%inc-mainv1 (_ BitVec 32)) (@L8*v1 Bool) (@L8*v2 Bool) (%inc-mainv3 (_ BitVec 32)) (@L4v4 Bool) (@L12v4 Bool) (@L5*v0 Bool) (@L3v2 Bool) (@L13v1 Bool) (@L9v2 Bool) (%cmp-mainv0 Bool) (@L5*v4 Bool) (@L15*v0 Bool) (%new.1-main*v0 (_ BitVec 32)) (@L5*v3 Bool) (@L15*v3 Bool) (@L4v3 Bool) (%inc-mainv2 (_ BitVec 32)) (%call-main*v4 (_ BitVec 32)) (%call-main*v2 (_ BitVec 32)) (@L0*v0 Bool) (%cmp.i-mainv2 Bool) (%new.0-main*v0 (_ BitVec 32)) (%tobool-mainv4 Bool) (%LOCK.0-main*v1 (_ BitVec 32)) (@L6*v3 Bool) (@L9v4 Bool) (@L8*v4 Bool) (%LOCK.0-main*v2 (_ BitVec 32)) (@L10*v3 Bool) (@L6*v0 Bool) (%LOCK.1-main*v0 (_ BitVec 32)) (%tobool-mainv3 Bool) (%tobool-mainv2 Bool) (@L5*v1 Bool) (@L2*v2 Bool) (@L10*v0 Bool) (@L15*v4 Bool) (@L5*v2 Bool) (%LOCK.1-main*v1 (_ BitVec 32)) (@L1v1 Bool) (@L12v1 Bool) (%cmp.i1-mainv0 Bool) (@L14*v4 Bool) (@L2*v1 Bool) (%call-main*v3 (_ BitVec 32)) (@L11v3 Bool) (@L13v2 Bool) (%cmp-mainv3 Bool) (%cmp-mainv1 Bool) (%cmp.i-mainv3 Bool) (%new.0-main*v1 (_ BitVec 32)) (%new.0-main*v3 (_ BitVec 32)) (%call-main*v0 (_ BitVec 32)) (@L8*v3 Bool) (%cmp.i1-mainv1 Bool) (@L6*v2 Bool) (call-$Y32-0v1 (_ BitVec 32)) (@L13v0 Bool) (@L1v3 Bool) (@L14*v3 Bool) (call-$Y32-0v0 (_ BitVec 32)) (%cmp.i3-mainv3 Bool) (@L0*v2 Bool) (%cmp.i-mainv4 Bool) (@L0*v3 Bool) (%cmp.i3-mainv0 Bool) (@L10*v1 Bool) (call-$Y32-0v2 (_ BitVec 32)) (@L0*v1 Bool) (%cmp-mainv4 Bool) (@L7v4 Bool) (@L14*v1 Bool) (call-$Y32-0v4 (_ BitVec 32)) (@L3v4 Bool) (@L11v4 Bool) (@L2*v0 Bool) (@L9v3 Bool) (%tobool-mainv1 Bool) (%inc-mainv4 (_ BitVec 32)) (@L3v1 Bool) (@L1v4 Bool) (call-$Y32-0v3 (_ BitVec 32)) (@L14*v2 Bool) (@L12v0 Bool) (%cmp.i3-mainv1 Bool) (%LOCK.0-main*v0 (_ BitVec 32)) (@L8*v0 Bool) (@L11v1 Bool) (%cmp.i-mainv1 Bool) (@L12v3 Bool) (%cmp.i3-mainv2 Bool) (@L9v0 Bool) (@L7v2 Bool) (@L1v0 Bool) (@L13v4 Bool) (@L3v0 Bool) (%tobool-mainv0 Bool) (@L13v3 Bool) (@L10*v2 Bool) (%cmp.i1-mainv3 Bool) (@L7v3 Bool) (@L11v2 Bool) (@L15*v1 Bool) (@L7v1 Bool) (%cmp-mainv2 Bool) (@L11v0 Bool) (@L6*v1 Bool) (%cmp.i-mainv0 Bool) (@L7v0 Bool) (@L3v3 Bool) )(let (($x1079 (and (distinct %call-main* %new.0-main*) true)))
 (let (($x40 (not @L5*)))
 (let ((?x1106 (bvadd (_ bv1 32) (_ bv1 32))))
 (let (($x1660 (= %new.0-main* ?x1106)))
 (let (($x756 (and (distinct (_ bv1 32) (_ bv0 32)) true)))
 (let (($x1530 (= %LOCK.1-main* %LOCK.1-main*)))
 (let (($x1644 (and (distinct (_ bv1 32) %LOCK.1-main*) true)))
 (let (($x1433 (= (_ bv1 32) (_ bv1 32))))
 (let (($x1399 (= (_ bv0 32) %LOCK.1-main*)))
 (let (($x32 (= %LOCK.1-main* (_ bv0 32))))
 (let ((?x959 (bvadd (_ bv1 32) %LOCK.1-main*)))
 (let (($x1442 (= ?x959 ?x959)))
 (let (($x1669 (= %new.1-main* %new.0-main*)))
 (let (($x619 (= %LOCK.0-main* %LOCK.1-main*)))
 (let (($x1212 (and (distinct (_ bv0 32) %new.0-main*) true)))
 (let (($x1664 (and (distinct (_ bv0 32) %call-main*) true)))
 (let (($x570 (and (distinct %call-main* (_ bv0 32)) true)))
 (let (($x35 (= %LOCK.0-main* (_ bv0 32))))
 (let (($x1119 (= %call-main* %call-main*)))
 (let (($x274 (not @L0*)))
 (let (($x1661 (= ?x959 (_ bv1 32))))
 (let (($x732 (and (distinct %call-main* (_ bv1 32)) true)))
 (let (($x43 (not @L10*)))
 (let (($x1656 (and (distinct (_ bv1 32) %call-main*) true)))
 (let (($x39 (not @L15*)))
 (let (($x38 (not @L8*)))
 (let (($x41 (not @L14*)))
 (let (($x1062 (= %new.0-main* %new.0-main*)))
 (let (($x1008 (and (distinct (_ bv1 32) %new.0-main*) true)))
 (let (($x937 (and (and (and (and (and (and $x1008 $x1530) (not @L6*)) $x40) $x40) $x1119) $x1530)))
 (let (($x1568 (and (and (and (and (and $x937 $x40) (= ?x1106 ?x1106)) $x40) $x1433) $x1530)))
 (let (($x1579 (and (and (and (and (and (and $x1568 $x1530) $x1399) $x1008) $x1008) $x1212) $x40)))
 (let (($x1646 (and (and (and (and (and (and $x1579 $x40) $x1530) $x1399) $x40) $x40) $x1644)))
 (let (($x1352 (and (and (and (and (and (and $x1646 $x1062) $x40) $x1433) $x1062) $x40) $x40)))
 (let (($x703 (and (and (and (and (and (and $x1352 $x40) $x40) $x1530) $x41) $x1530) $x1530)))
 (let (($x1877 (and (and (and (and (and (and $x703 $x38) $x1399) $x40) $x40) $x32) (and (distinct (_ bv0 32) call-$Y32-0v1) true))))
 (let (($x1871 (and (and (and (and (and (and $x1877 $x40) $x1530) $x39) $x1399) $x32) $x1530)))
 (let (($x1865 (and (and (and (and (and (and $x1871 $x1399) $x40) $x40) $x40) $x1433) $x40)))
 (let (($x1860 (and (and (and (and (and $x1865 $x40) $x1644) (and (distinct (_ bv0 32) %call-main*v2) true)) $x1530) $x40)))
 (let (($x1996 (and (and (and (and (and (and $x1860 $x40) $x40) $x40) $x1644) $x40) $x1433)))
 (let (($x1991 (and (and (and (and (and $x1996 (and (distinct %call-main*v3 (_ bv0 32)) true)) $x40) $x1656) $x1530) $x619)))
 (let (($x1985 (and (and (and (and (and (and $x1991 $x619) $x1530) $x1399) $x1079) $x40) $x1433)))
 (let (($x1980 (and (and (and (and (and $x1985 (and (distinct (_ bv1 32) %call-main*v2) true)) $x1530) $x1530) $x1530) $x1644)))
 (let (($x1974 (and (and (and (and (and (and $x1980 $x40) $x40) $x32) $x40) $x1442) (= %call-main*v3 call-$Y32-0v2))))
 (let (($x906 (and (and (and (and (and $x1974 (= call-$Y32-0v1 %call-main*v2)) $x40) $x1530) $x40) $x43)))
 (let (($x1236 (and (and (and (and (and (and $x906 $x1119) $x40) $x570) $x1530) $x732) $x32)))
 (let (($x1284 (and (and (and (and (and (and $x1236 $x1530) $x1433) $x40) $x40) $x40) $x1661)))
 (let (($x952 (and (and (and (and (and $x1284 @L2*) $x40) $x274) $x1119) (and (distinct %call-main*v3 (_ bv1 32)) true))))
 (let (($x1213 (and (and (and (and (and $x952 $x1433) $x40) (= %call-main*v3 %call-main*v2)) $x1644) $x35)))
 (let (($x1564 (and (and (and (and (and (and $x1213 $x40) $x40) $x40) $x40) $x40) $x40)))
 (let (($x530 (and (and (and (and (and (and $x1564 $x40) $x1644) $x1530) $x40) $x40) $x40)))
 (let (($x575 (and (and (and (and (and (and $x530 $x40) $x1530) $x40) $x32) $x1530) $x570)))
 (let (($x609 (and (and (and (and (and (and $x575 $x40) $x1644) $x1664) $x40) $x40) $x1530)))
 (let (($x527 (and (and (and (and (and (and $x609 $x40) $x40) $x1212) $x756) $x40) $x40)))
 (let (($x768 (and (and (and (and (and (and $x527 $x619) $x1669) $x40) $x40) $x1442) $x40)))
 (let (($x1503 (and (and (and (and (and (and $x768 $x40) $x32) $x1399) $x40) $x1433) $x1644)))
 (let (($x2067 (and (and (and (and (and (and $x1503 $x40) $x40) $x1530) $x40) $x40) $x40)))
 (let (($x2073 (and (and (and (and (and (and $x2067 $x40) $x40) $x756) $x40) $x1660) $x40)))
 (and (and (and $x2073 $x40) $x40) $x1079))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
 )
(check-sat)
