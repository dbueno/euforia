; filename: "statemachine1_false.c"
(set-info :source |Printed by VMT_Standalone 0.1 [taco]|)
; state variable decarations
(declare-fun %s.0-main* () (_ BitVec 32))
(declare-fun %s.0-main*+ () (_ BitVec 32))
(declare-fun %s.2-main* () (_ BitVec 32))
(declare-fun %s.2-main*+ () (_ BitVec 32))
(declare-fun @L6* () Bool)
(declare-fun @L6*+ () Bool)
(declare-fun @L5* () Bool)
(declare-fun @L5*+ () Bool)
(declare-fun @L2* () Bool)
(declare-fun @L2*+ () Bool)
(declare-fun %call-main* () (_ BitVec 32))
(declare-fun %call-main*+ () (_ BitVec 32))
(declare-fun @L0* () Bool)
(declare-fun @L0*+ () Bool)
; aux variable declarations
(declare-fun %or.cond-main () Bool)
(declare-fun %tobool-main () Bool)
(declare-fun %cmp1-main () Bool)
(declare-fun @L8 () Bool)
(declare-fun %or.cond1-main () Bool)
(declare-fun %cmp3-main () Bool)
(declare-fun %s.1-main () (_ BitVec 32))
(declare-fun %tobool5-main () Bool)
(declare-fun @L4 () Bool)
(declare-fun @L7 () Bool)
(declare-fun @L3 () Bool)
(declare-fun %cmp-main () Bool)
(declare-fun @L1 () Bool)
; input variable decarations
(declare-fun call-$Y32-0 () (_ BitVec 32))
; :next defs for state vars
(define-fun .def0 () (_ BitVec 32) (! %s.0-main* :next %s.0-main*+))
(define-fun .def1 () (_ BitVec 32) (! %s.2-main* :next %s.2-main*+))
(define-fun .def2 () Bool (! @L6* :next @L6*+))
(define-fun .def3 () Bool (! @L5* :next @L5*+))
(define-fun .def4 () Bool (! @L2* :next @L2*+))
(define-fun .def5 () (_ BitVec 32) (! %call-main* :next %call-main*+))
(define-fun .def6 () Bool (! @L0* :next @L0*+))
; initial state
(define-fun .def7 () Bool (= %s.2-main* #x00000000))
(define-fun .def8 () Bool (= %s.0-main* #x00000000))
(define-fun .def9 () Bool (= %call-main* #x00000000))
(define-fun .def10 () Bool (not @L2*))
(define-fun .def11 () Bool (not @L5*))
(define-fun .def12 () Bool (not @L6*))
(define-fun .def13 () Bool (and @L0* .def12 .def11 .def10 .def9 .def8 .def7))
(define-fun .def14 () Bool (! .def13 :init true))
; transition relation
(define-fun .def15 () Bool (= %s.0-main*+ %s.0-main*))
(define-fun .def16 () Bool (or @L2*+ .def15))
(define-fun .def17 () Bool (= %s.2-main*+ %s.2-main*))
(define-fun .def18 () Bool (or @L6*+ .def17))
(define-fun .def19 () Bool (= %call-main*+ %call-main*))
(define-fun .def20 () Bool (or @L4 .def19))
(define-fun .def21 () Bool (= @L8 @L6*))
(define-fun .def22 () Bool (= %s.0-main* #x00000001))
(define-fun .def23 () Bool (not .def22))
(define-fun .def24 () Bool (= %cmp3-main .def23))
(define-fun .def25 () (_ BitVec 32) (ite @L4 call-$Y32-0 %call-main*))
(define-fun .def26 () Bool (= .def25 #x00000000))
(define-fun .def27 () Bool (not .def26))
(define-fun .def28 () Bool (= %tobool5-main .def27))
(define-fun .def29 () Bool (or %cmp3-main %tobool5-main))
(define-fun .def30 () Bool (= %or.cond1-main .def29))
(define-fun .def31 () (_ BitVec 32) (ite %or.cond1-main %s.0-main* #x00000002))
(define-fun .def32 () Bool (= %s.1-main .def31))
(define-fun .def33 () Bool (not %or.cond-main))
(define-fun .def34 () Bool (and @L4 .def33))
(define-fun .def35 () Bool (= @L7 .def34))
(define-fun .def36 () Bool (and @L4 %or.cond-main))
(define-fun .def37 () (_ BitVec 32) (ite .def36 #x00000001 %s.1-main))
(define-fun .def38 () Bool (= %s.2-main*+ .def37))
(define-fun .def39 () Bool (not @L6*+))
(define-fun .def40 () Bool (or .def39 .def38))
(define-fun .def41 () Bool (or .def36 @L7))
(define-fun .def42 () Bool (= @L6*+ .def41))
(define-fun .def43 () Bool (not %cmp-main))
(define-fun .def44 () Bool (and @L3 .def43))
(define-fun .def45 () Bool (or .def44 @L5*))
(define-fun .def46 () Bool (= @L5*+ .def45))
(define-fun .def47 () Bool (= %call-main*+ call-$Y32-0))
(define-fun .def48 () Bool (not @L4))
(define-fun .def49 () Bool (or .def48 .def47))
(define-fun .def50 () Bool (= %cmp1-main .def8))
(define-fun .def51 () Bool (= %tobool-main .def27))
(define-fun .def52 () Bool (and %cmp1-main %tobool-main))
(define-fun .def53 () Bool (= %or.cond-main .def52))
(define-fun .def54 () Bool (and @L3 %cmp-main))
(define-fun .def55 () Bool (= @L4 .def54))
(define-fun .def56 () Bool (= %s.0-main* #x00000002))
(define-fun .def57 () Bool (not .def56))
(define-fun .def58 () Bool (= %cmp-main .def57))
(define-fun .def59 () Bool (= @L3 @L2*))
(define-fun .def60 () (_ BitVec 32) (ite @L1 #x00000000 %s.2-main*))
(define-fun .def61 () Bool (= %s.0-main*+ .def60))
(define-fun .def62 () Bool (not @L2*+))
(define-fun .def63 () Bool (or .def62 .def61))
(define-fun .def64 () Bool (or @L1 @L8))
(define-fun .def65 () Bool (= @L2*+ .def64))
(define-fun .def66 () Bool (= @L1 @L0*))
(define-fun .def67 () Bool (not @L0*+))
(define-fun .def68 () Bool (and .def67 .def66))
(define-fun .def69 () Bool (and .def68 .def65))
(define-fun .def70 () Bool (and .def69 .def63))
(define-fun .def71 () Bool (and .def70 .def59))
(define-fun .def72 () Bool (and .def71 .def58))
(define-fun .def73 () Bool (and .def72 .def55))
(define-fun .def74 () Bool (and .def73 .def53))
(define-fun .def75 () Bool (and .def74 .def51))
(define-fun .def76 () Bool (and .def75 .def50))
(define-fun .def77 () Bool (and .def76 .def49))
(define-fun .def78 () Bool (and .def77 .def46))
(define-fun .def79 () Bool (and .def78 .def42))
(define-fun .def80 () Bool (and .def79 .def40))
(define-fun .def81 () Bool (and .def80 .def35))
(define-fun .def82 () Bool (and .def81 .def32))
(define-fun .def83 () Bool (and .def82 .def30))
(define-fun .def84 () Bool (and .def83 .def28))
(define-fun .def85 () Bool (and .def84 .def24))
(define-fun .def86 () Bool (and .def85 .def21))
(define-fun .def87 () Bool (and .def86 .def20))
(define-fun .def88 () Bool (and .def87 .def18))
(define-fun .def89 () Bool (and .def88 .def16))
(define-fun .def90 () Bool (! .def89 :trans true))
; property
(define-fun .def91 () Bool (! .def11 :invar-property 0))
(assert true)
