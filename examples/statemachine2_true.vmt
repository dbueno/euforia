; filename: "statemachine2_true.c"
(set-info :source |Printed by VMT_Standalone 0.1 [taco]|)
; state variable decarations
(declare-fun %s.0-main* () (_ BitVec 32))
(declare-fun %s.0-main*+ () (_ BitVec 32))
(declare-fun %x.0-main* () (_ BitVec 32))
(declare-fun %x.0-main*+ () (_ BitVec 32))
(declare-fun %x.1-main* () (_ BitVec 32))
(declare-fun %x.1-main*+ () (_ BitVec 32))
(declare-fun %s.2-main* () (_ BitVec 32))
(declare-fun %s.2-main*+ () (_ BitVec 32))
(declare-fun @L9* () Bool)
(declare-fun @L9*+ () Bool)
(declare-fun @L7* () Bool)
(declare-fun @L7*+ () Bool)
(declare-fun @L4* () Bool)
(declare-fun @L4*+ () Bool)
(declare-fun @L2* () Bool)
(declare-fun @L2*+ () Bool)
(declare-fun %call-main* () (_ BitVec 32))
(declare-fun %call-main*+ () (_ BitVec 32))
(declare-fun @L0* () Bool)
(declare-fun @L0*+ () Bool)
; aux variable declarations
(declare-fun %or.cond-main () Bool)
(declare-fun %tobool-main () Bool)
(declare-fun %cmp6-main () Bool)
(declare-fun %or.cond2-main () Bool)
(declare-fun %switch-main () Bool)
(declare-fun %cmp9-main () Bool)
(declare-fun @L10 () Bool)
(declare-fun @L6 () Bool)
(declare-fun %tobool7-main () Bool)
(declare-fun %s.1-main () (_ BitVec 32))
(declare-fun %or.cond1-main () Bool)
(declare-fun @L8 () Bool)
(declare-fun @L11 () Bool)
(declare-fun @L5 () Bool)
(declare-fun %tobool11-main () Bool)
(declare-fun @L3 () Bool)
(declare-fun %cmp-main () Bool)
(declare-fun @L1 () Bool)
; input variable decarations
(declare-fun call-$Y32-0 () (_ BitVec 32))
; :next defs for state vars
(define-fun .def0 () (_ BitVec 32) (! %s.0-main* :next %s.0-main*+))
(define-fun .def1 () (_ BitVec 32) (! %x.0-main* :next %x.0-main*+))
(define-fun .def2 () (_ BitVec 32) (! %x.1-main* :next %x.1-main*+))
(define-fun .def3 () (_ BitVec 32) (! %s.2-main* :next %s.2-main*+))
(define-fun .def4 () Bool (! @L9* :next @L9*+))
(define-fun .def5 () Bool (! @L7* :next @L7*+))
(define-fun .def6 () Bool (! @L4* :next @L4*+))
(define-fun .def7 () Bool (! @L2* :next @L2*+))
(define-fun .def8 () (_ BitVec 32) (! %call-main* :next %call-main*+))
(define-fun .def9 () Bool (! @L0* :next @L0*+))
; initial state
(define-fun .def10 () Bool (= %s.2-main* #x00000000))
(define-fun .def11 () Bool (= %s.0-main* #x00000000))
(define-fun .def12 () Bool (= %x.1-main* #x00000000))
(define-fun .def13 () Bool (= %call-main* #x00000000))
(define-fun .def14 () Bool (= %x.0-main* #x00000000))
(define-fun .def15 () Bool (not @L2*))
(define-fun .def16 () Bool (not @L7*))
(define-fun .def17 () Bool (not @L4*))
(define-fun .def18 () Bool (not @L9*))
(define-fun .def19 () Bool (and @L0* .def18 .def17 .def16 .def15 .def14 .def13 .def12 .def11 .def10))
(define-fun .def20 () Bool (! .def19 :init true))
; transition relation
(define-fun .def21 () Bool (= %x.1-main*+ %x.1-main*))
(define-fun .def22 () Bool (or @L7*+ .def21))
(define-fun .def23 () Bool (= %call-main*+ %call-main*))
(define-fun .def24 () Bool (or @L6 .def23))
(define-fun .def25 () Bool (= %x.0-main*+ %x.0-main*))
(define-fun .def26 () Bool (or @L2*+ .def25))
(define-fun .def27 () Bool (= %s.2-main*+ %s.2-main*))
(define-fun .def28 () Bool (or @L9*+ .def27))
(define-fun .def29 () Bool (= %s.0-main*+ %s.0-main*))
(define-fun .def30 () Bool (or @L2*+ .def29))
(define-fun .def31 () Bool (= @L11 @L9*))
(define-fun .def32 () Bool (= %s.0-main* #x00000001))
(define-fun .def33 () Bool (not .def32))
(define-fun .def34 () Bool (= %cmp9-main .def33))
(define-fun .def35 () Bool (not .def12))
(define-fun .def36 () Bool (= %tobool11-main .def35))
(define-fun .def37 () Bool (or %cmp9-main %tobool11-main))
(define-fun .def38 () Bool (= %or.cond2-main .def37))
(define-fun .def39 () (_ BitVec 32) (ite %or.cond2-main %s.0-main* #x00000002))
(define-fun .def40 () Bool (= %s.1-main .def39))
(define-fun .def41 () Bool (not %or.cond1-main))
(define-fun .def42 () Bool (and @L8 .def41))
(define-fun .def43 () Bool (= @L10 .def42))
(define-fun .def44 () Bool (and @L8 %or.cond1-main))
(define-fun .def45 () (_ BitVec 32) (ite .def44 #x00000001 %s.1-main))
(define-fun .def46 () Bool (= %s.2-main*+ .def45))
(define-fun .def47 () Bool (not @L9*+))
(define-fun .def48 () Bool (or .def47 .def46))
(define-fun .def49 () Bool (or .def44 @L10))
(define-fun .def50 () Bool (= @L9*+ .def49))
(define-fun .def51 () Bool (= %cmp6-main .def11))
(define-fun .def52 () Bool (= %tobool7-main .def35))
(define-fun .def53 () Bool (and %cmp6-main %tobool7-main))
(define-fun .def54 () Bool (= %or.cond1-main .def53))
(define-fun .def55 () Bool (= @L8 @L7*))
(define-fun .def56 () (_ BitVec 32) (ite @L6 call-$Y32-0 %x.0-main*))
(define-fun .def57 () Bool (= %x.1-main*+ .def56))
(define-fun .def58 () Bool (not @L7*+))
(define-fun .def59 () Bool (or .def58 .def57))
(define-fun .def60 () Bool (not %switch-main))
(define-fun .def61 () Bool (and @L5 .def60))
(define-fun .def62 () Bool (or .def61 @L6))
(define-fun .def63 () Bool (= @L7*+ .def62))
(define-fun .def64 () Bool (= %call-main*+ call-$Y32-0))
(define-fun .def65 () Bool (not @L6))
(define-fun .def66 () Bool (or .def65 .def64))
(define-fun .def67 () Bool (and @L5 %switch-main))
(define-fun .def68 () Bool (= @L6 .def67))
(define-fun .def69 () Bool (bvule #x00000002 %s.0-main*))
(define-fun .def70 () Bool (not .def69))
(define-fun .def71 () Bool (= %switch-main .def70))
(define-fun .def72 () Bool (not %or.cond-main))
(define-fun .def73 () Bool (and @L3 .def72))
(define-fun .def74 () Bool (= @L5 .def73))
(define-fun .def75 () Bool (and @L3 %or.cond-main))
(define-fun .def76 () Bool (or .def75 @L4*))
(define-fun .def77 () Bool (= @L4*+ .def76))
(define-fun .def78 () Bool (= %s.0-main* #x00000002))
(define-fun .def79 () Bool (= %cmp-main .def78))
(define-fun .def80 () Bool (not .def14))
(define-fun .def81 () Bool (= %tobool-main .def80))
(define-fun .def82 () Bool (and %cmp-main %tobool-main))
(define-fun .def83 () Bool (= %or.cond-main .def82))
(define-fun .def84 () Bool (= @L3 @L2*))
(define-fun .def85 () (_ BitVec 32) (ite @L1 #x00000000 %x.1-main*))
(define-fun .def86 () Bool (= %x.0-main*+ .def85))
(define-fun .def87 () Bool (not @L2*+))
(define-fun .def88 () Bool (or .def87 .def86))
(define-fun .def89 () (_ BitVec 32) (ite @L1 #x00000000 %s.2-main*))
(define-fun .def90 () Bool (= %s.0-main*+ .def89))
(define-fun .def91 () Bool (or .def87 .def90))
(define-fun .def92 () Bool (or @L1 @L11))
(define-fun .def93 () Bool (= @L2*+ .def92))
(define-fun .def94 () Bool (= @L1 @L0*))
(define-fun .def95 () Bool (not @L0*+))
(define-fun .def96 () Bool (and .def95 .def94))
(define-fun .def97 () Bool (and .def96 .def93))
(define-fun .def98 () Bool (and .def97 .def91))
(define-fun .def99 () Bool (and .def98 .def88))
(define-fun .def100 () Bool (and .def99 .def84))
(define-fun .def101 () Bool (and .def100 .def83))
(define-fun .def102 () Bool (and .def101 .def81))
(define-fun .def103 () Bool (and .def102 .def79))
(define-fun .def104 () Bool (and .def103 .def77))
(define-fun .def105 () Bool (and .def104 .def74))
(define-fun .def106 () Bool (and .def105 .def71))
(define-fun .def107 () Bool (and .def106 .def68))
(define-fun .def108 () Bool (and .def107 .def66))
(define-fun .def109 () Bool (and .def108 .def63))
(define-fun .def110 () Bool (and .def109 .def59))
(define-fun .def111 () Bool (and .def110 .def55))
(define-fun .def112 () Bool (and .def111 .def54))
(define-fun .def113 () Bool (and .def112 .def52))
(define-fun .def114 () Bool (and .def113 .def51))
(define-fun .def115 () Bool (and .def114 .def50))
(define-fun .def116 () Bool (and .def115 .def48))
(define-fun .def117 () Bool (and .def116 .def43))
(define-fun .def118 () Bool (and .def117 .def40))
(define-fun .def119 () Bool (and .def118 .def38))
(define-fun .def120 () Bool (and .def119 .def36))
(define-fun .def121 () Bool (and .def120 .def34))
(define-fun .def122 () Bool (and .def121 .def31))
(define-fun .def123 () Bool (and .def122 .def30))
(define-fun .def124 () Bool (and .def123 .def28))
(define-fun .def125 () Bool (and .def124 .def26))
(define-fun .def126 () Bool (and .def125 .def24))
(define-fun .def127 () Bool (and .def126 .def22))
(define-fun .def128 () Bool (! .def127 :trans true))
; property
(define-fun .def129 () Bool (! .def17 :invar-property 0))
(assert true)
