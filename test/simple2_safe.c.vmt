; RUN: euforia %s | OutputCheckSmt2 %s
; CHECK: ^true\(unreach-call\)$
; 2 state variables
; (including 2 locations)
(declare-fun main@entry () Bool)
(declare-fun main@entry+ () Bool)
(define-fun .def0 () Bool (! main@entry :next main@entry+))
(declare-fun main@verifier.error.split () Bool)
(declare-fun main@verifier.error.split+ () Bool)
(define-fun .def2 () Bool (! main@verifier.error.split :next main@verifier.error.split+))
; 25 inputs
(declare-fun main@%_5_0 () (_ BitVec 32))
(declare-fun main@%_6_0 () (_ BitVec 64))
(declare-fun main@%sm2_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%_7_0 () (_ BitVec 32))
(declare-fun main@%_8_0 () Bool)
(declare-fun @llvm.used_0 () (_ BitVec 64))
(declare-fun main@%sm3_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%_2_0 () (_ BitVec 64))
(declare-fun main@%_3_0 () (_ BitVec 64))
(declare-fun main@%sm_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%_4_0 () Bool)
(declare-fun main@entry_0 () Bool)
(declare-fun main@%sm4_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%sm5_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%_0_0 () (_ BitVec 64))
(declare-fun main@%_1_0 () (_ BitVec 64))
(declare-fun main@precall_0 () Bool)
(declare-fun main@%sm1_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@f_0 () Bool)
(declare-fun main@_9_0 () Bool)
(declare-fun main@verifier.error_0 () Bool)
(declare-fun main@verifier.error.split_0 () Bool)
(declare-fun .cond1 () Bool)
(declare-fun .cond3 () Bool)
; transitions
(define-fun .def4 () Bool
  (= main@entry+ (ite .cond1 false false)))

(define-fun .def5 () Bool
  (= main@verifier.error.split+ (ite .cond3 true false)))

(define-fun .def6 () Bool
  (= .cond1 true))

(define-fun .def7 () Bool
  (= .cond3 (let ((a!1 (=> main@precall_0
               (= main@%sm1_0
                  (store main@%sm5_0 main@%_1_0 ((_ zero_extend 32) #x00000000)))))
      (a!2 (=> main@f_0
               (= main@%_5_0 ((_ extract 31 0) (select main@%sm1_0 main@%_1_0)))))
      (a!3 (=> main@f_0
               (= main@%sm2_0
                  (store main@%sm4_0 main@%_0_0 ((_ zero_extend 32) main@%_5_0)))))
      (a!4 (=> main@f_0
               (= main@%_7_0 ((_ extract 31 0) (select main@%sm2_0 main@%_0_0))))))
  (and main@entry
       true
       true
       (bvugt @llvm.used_0 #x0000000000000000)
       (bvugt main@%_0_0 #x0000000000000000)
       (bvugt main@%_1_0 #x0000000000000000)
       (bvugt main@%_2_0 #x0000000000000000)
       (= main@%_3_0 main@%_2_0)
       (= main@%sm_0
          (store main@%sm3_0 main@%_2_0 ((_ zero_extend 32) #x00000000)))
       (not main@%_4_0)
       (=> main@precall_0 (and main@precall_0 main@entry_0))
       a!1
       (=> main@f_0 (and main@f_0 main@precall_0))
       a!2
       (=> main@f_0 (= main@%_6_0 main@%_0_0))
       a!3
       a!4
       (=> main@f_0 (= main@%_8_0 (bvslt main@%_7_0 #x00000007)))
       (=> main@f_0 (not main@%_8_0))
       (=> main@_9_0 (and main@_9_0 main@f_0))
       (=> main@verifier.error_0 (and main@verifier.error_0 main@_9_0))
       (=> main@verifier.error.split_0
           (and main@verifier.error.split_0 main@verifier.error_0))
       main@verifier.error.split_0))))

(define-fun .trans () Bool
  (! (and .def4 .def5 .def6 .def7) :trans true))
; initial state
(define-fun .def8 () Bool (! (and main@entry (not main@verifier.error.split)) :init true))
; property
(define-fun .def9 () Bool (! (not main@verifier.error.split) :invar-property 0))
