; RUN: euforia %s | OutputCheckSmt2 %s
; CHECK: ^false\(unreach-call\)$
; filename: "../../vmt2/examples/loopint-cx_false.c"
(set-info :source |Printed by VMT_Standalone 0.1 [taco]|)
; state variable decarations
(declare-fun %c.0-main* () (_ BitVec 32))
(declare-fun %c.0-main*+ () (_ BitVec 32))
(declare-fun @L5* () Bool)
(declare-fun @L5*+ () Bool)
(declare-fun @L2* () Bool)
(declare-fun @L2*+ () Bool)
(declare-fun @L0* () Bool)
(declare-fun @L0*+ () Bool)
; aux variable declarations
(declare-fun %cmp-main () Bool)
(declare-fun %add-main () (_ BitVec 32))
(declare-fun @L4 () Bool)
(declare-fun @L3 () Bool)
(declare-fun @L1 () Bool)
; input variable decarations
; :next defs for state vars
(define-fun .def0 () (_ BitVec 32) (! %c.0-main* :next %c.0-main*+))
(define-fun .def1 () Bool (! @L5* :next @L5*+))
(define-fun .def2 () Bool (! @L2* :next @L2*+))
(define-fun .def3 () Bool (! @L0* :next @L0*+))
; initial state
(define-fun .def4 () Bool (= %c.0-main* #x00000000))
(define-fun .def5 () Bool (not @L2*))
(define-fun .def6 () Bool (not @L5*))
(define-fun .def7 () Bool (and @L0* .def6 .def5 .def4))
(define-fun .def8 () Bool (! .def7 :init true))
; transition relation
(define-fun .def9 () Bool (= %c.0-main*+ %c.0-main*))
(define-fun .def10 () Bool (or @L2*+ .def9))
(define-fun .def11 () Bool (not %cmp-main))
(define-fun .def12 () Bool (and @L3 .def11))
(define-fun .def13 () Bool (or .def12 @L5*))
(define-fun .def14 () Bool (= @L5*+ .def13))
(define-fun .def15 () (_ BitVec 32) (bvadd #x00000003 %c.0-main*))
(define-fun .def16 () Bool (= %add-main .def15))
(define-fun .def17 () Bool (and @L3 %cmp-main))
(define-fun .def18 () Bool (= @L4 .def17))
(define-fun .def19 () Bool (bvsle #x00000007 %c.0-main*))
(define-fun .def20 () Bool (not .def19))
(define-fun .def21 () Bool (= %cmp-main .def20))
(define-fun .def22 () Bool (= @L3 @L2*))
(define-fun .def23 () (_ BitVec 32) (ite @L1 #x00000000 %add-main))
(define-fun .def24 () Bool (= %c.0-main*+ .def23))
(define-fun .def25 () Bool (not @L2*+))
(define-fun .def26 () Bool (or .def25 .def24))
(define-fun .def27 () Bool (or @L1 @L4))
(define-fun .def28 () Bool (= @L2*+ .def27))
(define-fun .def29 () Bool (= @L1 @L0*))
(define-fun .def30 () Bool (not @L0*+))
(define-fun .def31 () Bool (and .def30 .def29))
(define-fun .def32 () Bool (and .def31 .def28))
(define-fun .def33 () Bool (and .def32 .def26))
(define-fun .def34 () Bool (and .def33 .def22))
(define-fun .def35 () Bool (and .def34 .def21))
(define-fun .def36 () Bool (and .def35 .def18))
(define-fun .def37 () Bool (and .def36 .def16))
(define-fun .def38 () Bool (and .def37 .def14))
(define-fun .def39 () Bool (and .def38 .def10))
(define-fun .def40 () Bool (! .def39 :trans true))
; property
(define-fun .def41 () Bool (! .def6 :invar-property 0))
(assert true)
