; RUN: euforia %s | OutputCheckSmt2 %s
; CHECK: ^true\(unreach-call\)$
; filename: "../../vmt2/examples/blast1_small_safe.c"
(set-info :source |Printed by VMT_Standalone 0.1 [taco]|)
; state variable decarations
(declare-fun %new.0-main* () (_ BitVec 32))
(declare-fun %new.0-main*+ () (_ BitVec 32))
(declare-fun %new.1-main* () (_ BitVec 32))
(declare-fun %new.1-main*+ () (_ BitVec 32))
(declare-fun @L14* () Bool)
(declare-fun @L14*+ () Bool)
(declare-fun %LOCK.1-main* () (_ BitVec 32))
(declare-fun %LOCK.1-main*+ () (_ BitVec 32))
(declare-fun @L15* () Bool)
(declare-fun @L15*+ () Bool)
(declare-fun @L10* () Bool)
(declare-fun @L10*+ () Bool)
(declare-fun @L8* () Bool)
(declare-fun @L8*+ () Bool)
(declare-fun @L6* () Bool)
(declare-fun @L6*+ () Bool)
(declare-fun %LOCK.0-main* () (_ BitVec 32))
(declare-fun %LOCK.0-main*+ () (_ BitVec 32))
(declare-fun @L5* () Bool)
(declare-fun @L5*+ () Bool)
(declare-fun @L2* () Bool)
(declare-fun @L2*+ () Bool)
(declare-fun %call-main* () (_ BitVec 32))
(declare-fun %call-main*+ () (_ BitVec 32))
(declare-fun @L0* () Bool)
(declare-fun @L0*+ () Bool)
; aux variable declarations
(declare-fun %cmp.i-main () Bool)
(declare-fun %tobool-main () Bool)
(declare-fun %cmp.i1-main () Bool)
(declare-fun @L1 () Bool)
(declare-fun %cmp-main () Bool)
(declare-fun @L9 () Bool)
(declare-fun @L13 () Bool)
(declare-fun @L12 () Bool)
(declare-fun @L11 () Bool)
(declare-fun %cmp.i3-main () Bool)
(declare-fun @L3 () Bool)
(declare-fun %inc-main () (_ BitVec 32))
(declare-fun @L4 () Bool)
(declare-fun @L7 () Bool)
; input variable decarations
(declare-fun call-$Y32-0 () (_ BitVec 32))
; :next defs for state vars
(define-fun .def0 () (_ BitVec 32) (! %new.0-main* :next %new.0-main*+))
(define-fun .def1 () (_ BitVec 32) (! %new.1-main* :next %new.1-main*+))
(define-fun .def2 () Bool (! @L14* :next @L14*+))
(define-fun .def3 () (_ BitVec 32) (! %LOCK.1-main* :next %LOCK.1-main*+))
(define-fun .def4 () Bool (! @L15* :next @L15*+))
(define-fun .def5 () Bool (! @L10* :next @L10*+))
(define-fun .def6 () Bool (! @L8* :next @L8*+))
(define-fun .def7 () Bool (! @L6* :next @L6*+))
(define-fun .def8 () (_ BitVec 32) (! %LOCK.0-main* :next %LOCK.0-main*+))
(define-fun .def9 () Bool (! @L5* :next @L5*+))
(define-fun .def10 () Bool (! @L2* :next @L2*+))
(define-fun .def11 () (_ BitVec 32) (! %call-main* :next %call-main*+))
(define-fun .def12 () Bool (! @L0* :next @L0*+))
; initial state
(define-fun .def13 () Bool (= %LOCK.1-main* #x00000000))
(define-fun .def14 () Bool (= %new.1-main* #x00000000))
(define-fun .def15 () Bool (= %call-main* #x00000000))
(define-fun .def16 () Bool (= %LOCK.0-main* #x00000000))
(define-fun .def17 () Bool (= %new.0-main* #x00000000))
(define-fun .def18 () Bool (not @L2*))
(define-fun .def19 () Bool (not @L8*))
(define-fun .def20 () Bool (not @L15*))
(define-fun .def21 () Bool (not @L5*))
(define-fun .def22 () Bool (not @L14*))
(define-fun .def23 () Bool (not @L6*))
(define-fun .def24 () Bool (not @L10*))
(define-fun .def25 () Bool (and @L0* .def24 .def23 .def22 .def21 .def20 .def19 .def18 .def17 .def16 .def15 .def14 .def13))
(define-fun .def26 () Bool (! .def25 :init true))
; transition relation
(define-fun .def27 () Bool (= %LOCK.1-main*+ %LOCK.1-main*))
(define-fun .def28 () Bool (or @L8*+ .def27))
(define-fun .def29 () Bool (= %new.1-main*+ %new.1-main*))
(define-fun .def30 () Bool (or @L8*+ .def29))
(define-fun .def31 () Bool (= %call-main*+ %call-main*))
(define-fun .def32 () Bool (or @L4 .def31))
(define-fun .def33 () Bool (= %LOCK.0-main*+ %LOCK.0-main*))
(define-fun .def34 () Bool (or @L2*+ .def33))
(define-fun .def35 () Bool (= %new.0-main*+ %new.0-main*))
(define-fun .def36 () Bool (or @L2*+ .def35))
(define-fun .def37 () Bool (or @L13 @L15*))
(define-fun .def38 () Bool (= @L15*+ .def37))
(define-fun .def39 () Bool (not %cmp.i3-main))
(define-fun .def40 () Bool (and @L12 .def39))
(define-fun .def41 () Bool (= @L14*+ .def40))
(define-fun .def42 () Bool (and @L12 %cmp.i3-main))
(define-fun .def43 () Bool (= @L13 .def42))
(define-fun .def44 () Bool (= %LOCK.1-main* #x00000001))
(define-fun .def45 () Bool (= %cmp.i3-main .def44))
(define-fun .def46 () Bool (not %cmp-main))
(define-fun .def47 () Bool (and @L11 .def46))
(define-fun .def48 () Bool (= @L12 .def47))
(define-fun .def49 () Bool (= %new.1-main* %new.0-main*))
(define-fun .def50 () Bool (not .def49))
(define-fun .def51 () Bool (= %cmp-main .def50))
(define-fun .def52 () Bool (= @L11 @L8*))
(define-fun .def53 () Bool (not %cmp.i1-main))
(define-fun .def54 () Bool (and @L7 .def53))
(define-fun .def55 () Bool (= @L10*+ .def54))
(define-fun .def56 () (_ BitVec 32) (bvadd #x00000001 %new.0-main*))
(define-fun .def57 () Bool (= %inc-main .def56))
(define-fun .def58 () Bool (and @L7 %cmp.i1-main))
(define-fun .def59 () Bool (= @L9 .def58))
(define-fun .def60 () (_ BitVec 32) (ite @L9 #x00000000 #x00000001))
(define-fun .def61 () Bool (= %LOCK.1-main*+ .def60))
(define-fun .def62 () Bool (not @L8*+))
(define-fun .def63 () Bool (or .def62 .def61))
(define-fun .def64 () (_ BitVec 32) (ite @L9 %inc-main %new.0-main*))
(define-fun .def65 () Bool (= %new.1-main*+ .def64))
(define-fun .def66 () Bool (or .def62 .def65))
(define-fun .def67 () Bool (not %tobool-main))
(define-fun .def68 () Bool (and @L4 .def67))
(define-fun .def69 () Bool (or .def68 @L9))
(define-fun .def70 () Bool (= @L8*+ .def69))
(define-fun .def71 () Bool (and @L4 %tobool-main))
(define-fun .def72 () Bool (= @L7 .def71))
(define-fun .def73 () Bool (or @L10* @L14*))
(define-fun .def74 () Bool (or @L6* .def73))
(define-fun .def75 () Bool (or @L5* .def74))
(define-fun .def76 () Bool (= @L6*+ .def75))
(define-fun .def77 () Bool (not %cmp.i-main))
(define-fun .def78 () Bool (and @L3 .def77))
(define-fun .def79 () Bool (= @L5*+ .def78))
(define-fun .def80 () Bool (= %call-main*+ call-$Y32-0))
(define-fun .def81 () Bool (not @L4))
(define-fun .def82 () Bool (or .def81 .def80))
(define-fun .def83 () (_ BitVec 32) (ite @L4 call-$Y32-0 %call-main*))
(define-fun .def84 () Bool (= .def83 #x00000000))
(define-fun .def85 () Bool (not .def84))
(define-fun .def86 () Bool (= %tobool-main .def85))
(define-fun .def87 () Bool (and @L3 %cmp.i-main))
(define-fun .def88 () Bool (= @L4 .def87))
(define-fun .def89 () Bool (= %cmp.i-main .def16))
(define-fun .def90 () Bool (= @L3 @L2*))
(define-fun .def91 () (_ BitVec 32) (ite @L1 #x00000000 %LOCK.1-main*))
(define-fun .def92 () Bool (= %LOCK.0-main*+ .def91))
(define-fun .def93 () Bool (not @L2*+))
(define-fun .def94 () Bool (or .def93 .def92))
(define-fun .def95 () (_ BitVec 32) (ite @L1 #x00000000 %new.1-main*))
(define-fun .def96 () Bool (= %new.0-main*+ .def95))
(define-fun .def97 () Bool (or .def93 .def96))
(define-fun .def98 () Bool (and @L11 %cmp-main))
(define-fun .def99 () Bool (or @L1 .def98))
(define-fun .def100 () Bool (= @L2*+ .def99))
(define-fun .def101 () Bool (= @L1 @L0*))
(define-fun .def102 () Bool (not @L0*+))
(define-fun .def103 () Bool (and .def102 .def101))
(define-fun .def104 () Bool (and .def103 .def100))
(define-fun .def105 () Bool (and .def104 .def97))
(define-fun .def106 () Bool (and .def105 .def94))
(define-fun .def107 () Bool (and .def106 .def90))
(define-fun .def108 () Bool (and .def107 .def89))
(define-fun .def109 () Bool (and .def108 .def88))
(define-fun .def110 () Bool (and .def109 .def86))
(define-fun .def111 () Bool (and .def110 .def82))
(define-fun .def112 () Bool (and .def111 .def79))
(define-fun .def113 () Bool (and .def112 .def76))
(define-fun .def114 () Bool (and .def113 .def72))
(define-fun .def115 () Bool (and .def114 %cmp.i1-main))
(define-fun .def116 () Bool (and .def115 .def70))
(define-fun .def117 () Bool (and .def116 .def66))
(define-fun .def118 () Bool (and .def117 .def63))
(define-fun .def119 () Bool (and .def118 .def59))
(define-fun .def120 () Bool (and .def119 .def57))
(define-fun .def121 () Bool (and .def120 .def55))
(define-fun .def122 () Bool (and .def121 .def52))
(define-fun .def123 () Bool (and .def122 .def51))
(define-fun .def124 () Bool (and .def123 .def48))
(define-fun .def125 () Bool (and .def124 .def45))
(define-fun .def126 () Bool (and .def125 .def43))
(define-fun .def127 () Bool (and .def126 .def41))
(define-fun .def128 () Bool (and .def127 .def38))
(define-fun .def129 () Bool (and .def128 .def36))
(define-fun .def130 () Bool (and .def129 .def34))
(define-fun .def131 () Bool (and .def130 .def32))
(define-fun .def132 () Bool (and .def131 .def30))
(define-fun .def133 () Bool (and .def132 .def28))
(define-fun .def134 () Bool (! .def133 :trans true))
; property
(define-fun .def135 () Bool (and .def22 .def24 .def21))
(define-fun .def136 () Bool (! .def135 :invar-property 0))
(assert true)
