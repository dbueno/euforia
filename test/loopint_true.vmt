; RUN: euforia %s | OutputCheckSmt2 %s
; CHECK: ^true\(unreach-call\)$
; filename: "loopint_true.c"
(set-info :source |Printed by VMT_Standalone 0.1 [taco]|)
; state variable decarations
(declare-fun %i.0-main* () (_ BitVec 32))
(declare-fun %i.0-main*+ () (_ BitVec 32))
(declare-fun @L10* () Bool)
(declare-fun @L10*+ () Bool)
(declare-fun @L9* () Bool)
(declare-fun @L9*+ () Bool)
(declare-fun @L6* () Bool)
(declare-fun @L6*+ () Bool)
(declare-fun @L5* () Bool)
(declare-fun @L5*+ () Bool)
(declare-fun @L2* () Bool)
(declare-fun @L2*+ () Bool)
(declare-fun @L0* () Bool)
(declare-fun @L0*+ () Bool)
; aux variable declarations
(declare-fun %cmp-main () Bool)
(declare-fun %cmp1-main () Bool)
(declare-fun %cmp2-main () Bool)
(declare-fun @L8 () Bool)
(declare-fun @L4 () Bool)
(declare-fun @L7 () Bool)
(declare-fun @L3 () Bool)
(declare-fun %add-main () (_ BitVec 32))
(declare-fun @L1 () Bool)
; input variable decarations
; :next defs for state vars
(define-fun .def0 () (_ BitVec 32) (! %i.0-main* :next %i.0-main*+))
(define-fun .def1 () Bool (! @L10* :next @L10*+))
(define-fun .def2 () Bool (! @L9* :next @L9*+))
(define-fun .def3 () Bool (! @L6* :next @L6*+))
(define-fun .def4 () Bool (! @L5* :next @L5*+))
(define-fun .def5 () Bool (! @L2* :next @L2*+))
(define-fun .def6 () Bool (! @L0* :next @L0*+))
; initial state
(define-fun .def7 () Bool (= %i.0-main* #x00000000))
(define-fun .def8 () Bool (not @L2*))
(define-fun .def9 () Bool (not @L5*))
(define-fun .def10 () Bool (not @L6*))
(define-fun .def11 () Bool (not @L10*))
(define-fun .def12 () Bool (not @L9*))
(define-fun .def13 () Bool (and @L0* .def12 .def11 .def10 .def9 .def8 .def7))
(define-fun .def14 () Bool (! .def13 :init true))
; transition relation
(define-fun .def15 () Bool (= %i.0-main*+ %i.0-main*))
(define-fun .def16 () Bool (or @L2*+ .def15))
(define-fun .def17 () Bool (or @L8 @L10*))
(define-fun .def18 () Bool (= @L10*+ .def17))
(define-fun .def19 () Bool (not %cmp2-main))
(define-fun .def20 () Bool (and @L7 .def19))
(define-fun .def21 () Bool (= @L9*+ .def20))
(define-fun .def22 () Bool (and @L7 %cmp2-main))
(define-fun .def23 () Bool (= @L8 .def22))
(define-fun .def24 () Bool (bvsle #x00000007 %add-main))
(define-fun .def25 () Bool (not .def24))
(define-fun .def26 () Bool (= %cmp2-main .def25))
(define-fun .def27 () Bool (not %cmp1-main))
(define-fun .def28 () Bool (and @L4 .def27))
(define-fun .def29 () Bool (= @L7 .def28))
(define-fun .def30 () Bool (or @L6* @L9*))
(define-fun .def31 () Bool (or @L5* .def30))
(define-fun .def32 () Bool (= @L6*+ .def31))
(define-fun .def33 () Bool (not %cmp-main))
(define-fun .def34 () Bool (and @L3 .def33))
(define-fun .def35 () Bool (= @L5*+ .def34))
(define-fun .def36 () (_ BitVec 32) (bvadd #x00000003 %i.0-main*))
(define-fun .def37 () Bool (= %add-main .def36))
(define-fun .def38 () Bool (bvsle #x00000005 %add-main))
(define-fun .def39 () Bool (not .def38))
(define-fun .def40 () Bool (= %cmp1-main .def39))
(define-fun .def41 () Bool (and @L3 %cmp-main))
(define-fun .def42 () Bool (= @L4 .def41))
(define-fun .def43 () Bool (bvsle #x00000007 %i.0-main*))
(define-fun .def44 () Bool (not .def43))
(define-fun .def45 () Bool (= %cmp-main .def44))
(define-fun .def46 () Bool (= @L3 @L2*))
(define-fun .def47 () (_ BitVec 32) (ite @L1 #x00000000 %add-main))
(define-fun .def48 () Bool (= %i.0-main*+ .def47))
(define-fun .def49 () Bool (not @L2*+))
(define-fun .def50 () Bool (or .def49 .def48))
(define-fun .def51 () Bool (and @L4 %cmp1-main))
(define-fun .def52 () Bool (or @L1 .def51))
(define-fun .def53 () Bool (= @L2*+ .def52))
(define-fun .def54 () Bool (= @L1 @L0*))
(define-fun .def55 () Bool (not @L0*+))
(define-fun .def56 () Bool (and .def55 .def54))
(define-fun .def57 () Bool (and .def56 .def53))
(define-fun .def58 () Bool (and .def57 .def50))
(define-fun .def59 () Bool (and .def58 .def46))
(define-fun .def60 () Bool (and .def59 .def45))
(define-fun .def61 () Bool (and .def60 .def42))
(define-fun .def62 () Bool (and .def61 .def40))
(define-fun .def63 () Bool (and .def62 .def37))
(define-fun .def64 () Bool (and .def63 .def35))
(define-fun .def65 () Bool (and .def64 .def32))
(define-fun .def66 () Bool (and .def65 .def29))
(define-fun .def67 () Bool (and .def66 .def26))
(define-fun .def68 () Bool (and .def67 .def23))
(define-fun .def69 () Bool (and .def68 .def21))
(define-fun .def70 () Bool (and .def69 .def18))
(define-fun .def71 () Bool (and .def70 .def16))
(define-fun .def72 () Bool (! .def71 :trans true))
; property
(define-fun .def73 () Bool (and .def12 .def9))
(define-fun .def74 () Bool (! .def73 :invar-property 0))
(assert true)
