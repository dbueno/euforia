; RUN: euforia %s | OutputCheckSmt2 %s
; CHECK: ^true\(unreach-call\)$
; 12 state variables
; (including 7 locations)
(declare-fun |select(f@%sm1, @a)| () (_ BitVec 1))
(declare-fun |select(f@%sm1, @a)+| () (_ BitVec 1))
(define-fun .def0 () (_ BitVec 1) (! |select(f@%sm1, @a)| :next |select(f@%sm1, @a)+|))
(declare-fun |select(f@%sm, @a)| () (_ BitVec 1))
(declare-fun |select(f@%sm, @a)+| () (_ BitVec 1))
(define-fun .def3 () (_ BitVec 1) (! |select(f@%sm, @a)| :next |select(f@%sm, @a)+|))
(declare-fun f@_sm1 () Bool)
(declare-fun f@_sm1+ () Bool)
(define-fun .def4 () Bool (! f@_sm1 :next f@_sm1+))
(declare-fun f@.split () Bool)
(declare-fun f@.split+ () Bool)
(define-fun .def5 () Bool (! f@.split :next f@.split+))
(declare-fun |select(main@%sh, @a)| () (_ BitVec 1))
(declare-fun |select(main@%sh, @a)+| () (_ BitVec 1))
(define-fun .def6 () (_ BitVec 1) (! |select(main@%sh, @a)| :next |select(main@%sh, @a)+|))
(declare-fun |select(main@%sm1, @a)| () (_ BitVec 1))
(declare-fun |select(main@%sm1, @a)+| () (_ BitVec 1))
(define-fun .def8 () (_ BitVec 1) (! |select(main@%sm1, @a)| :next |select(main@%sm1, @a)+|))
(declare-fun |select(main@%sm2, @a)| () (_ BitVec 1))
(declare-fun |select(main@%sm2, @a)+| () (_ BitVec 1))
(define-fun .def10 () (_ BitVec 1) (! |select(main@%sm2, @a)| :next |select(main@%sm2, @a)+|))
(declare-fun main@entry () Bool)
(declare-fun main@entry+ () Bool)
(define-fun .def11 () Bool (! main@entry :next main@entry+))
(declare-fun main@_0 () Bool)
(declare-fun main@_0+ () Bool)
(define-fun .def13 () Bool (! main@_0 :next main@_0+))
(declare-fun main@_1 () Bool)
(declare-fun main@_1+ () Bool)
(define-fun .def14 () Bool (! main@_1 :next main@_1+))
(declare-fun main@verifier.error.split () Bool)
(declare-fun main@verifier.error.split+ () Bool)
(define-fun .def15 () Bool (! main@verifier.error.split :next main@verifier.error.split+))
(declare-fun wait@f-ret-to-main@_0 () Bool)
(declare-fun wait@f-ret-to-main@_0+ () Bool)
(define-fun .def17 () Bool (! wait@f-ret-to-main@_0 :next wait@f-ret-to-main@_0+))
; 36 inputs
(declare-fun |select(f@%sm, @a)_0| () (_ BitVec 1))
(declare-fun f@_sm1_0 () Bool)
(declare-fun f@.split_0 () Bool)
(declare-fun main@%.b.i_0 () Bool)
(declare-fun main@%_3_0 () (_ BitVec 32))
(declare-fun main@%_2_0 () Bool)
(declare-fun |select(main@%sm1, @a)_0| () (_ BitVec 1))
(declare-fun @a_0 () (_ BitVec 32))
(declare-fun @llvm.used_0 () (_ BitVec 32))
(declare-fun |select(main@%sm, @a)_0| () (_ BitVec 1))
(declare-fun main@entry_0 () Bool)
(declare-fun main@_0_0 () Bool)
(declare-fun |select(main@%sh, @a)_0| () (_ BitVec 1))
(declare-fun main@_1_0 () Bool)
(declare-fun main@precall_0 () Bool)
(declare-fun main@g_0 () Bool)
(declare-fun main@_4_0 () Bool)
(declare-fun main@verifier.error_0 () Bool)
(declare-fun main@verifier.error.split_0 () Bool)
(declare-fun .cond1 () Bool)
(declare-fun .cond2 () Bool)
(declare-fun .cond7 () Bool)
(declare-fun .cond9 () Bool)
(declare-fun .cond12 () Bool)
(declare-fun .cond16 () Bool)
(declare-fun .cond18 () Bool)
; transitions
(define-fun .def19 () Bool
  (= |select(f@%sm1, @a)+| (ite .cond2
     |select(main@%sm1, @a)|
     (ite .cond1 |select(f@%sm1, @a)| |select(f@%sm1, @a)|))))

(define-fun .def20 () Bool
  (= |select(f@%sm, @a)+| (ite .cond1 |select(f@%sm, @a)_0| |select(f@%sm, @a)|)))

(define-fun .def21 () Bool
  (= f@_sm1+ (ite .cond2 true false)))

(define-fun .def22 () Bool
  (= f@.split+ (ite .cond1 true false)))

(define-fun .def23 () Bool
  (= |select(main@%sh, @a)+| (ite .cond7 |select(main@%sh, @a)_0| |select(main@%sh, @a)|)))

(define-fun .def24 () Bool
  (= |select(main@%sm1, @a)+| (ite .cond9 |select(main@%sm1, @a)_0| |select(main@%sm1, @a)|)))

(define-fun .def25 () Bool
  (= |select(main@%sm2, @a)+| |select(main@%sm2, @a)|))

(define-fun .def26 () Bool
  (= main@entry+ (ite .cond12 false false)))

(define-fun .def27 () Bool
  (= main@_0+ (ite .cond9 true false)))

(define-fun .def28 () Bool
  (= main@_1+ (ite .cond7 true false)))

(define-fun .def29 () Bool
  (= main@verifier.error.split+ (ite .cond16 true false)))

(define-fun .def30 () Bool
  (= wait@f-ret-to-main@_0+ (ite .cond7 false (ite .cond2 true (ite .cond18 true false)))))

(define-fun .def31 () Bool
  (= .cond12 true))

(define-fun .def32 () Bool
  (= .cond1 (and f@_sm1
     true
     (= |select(f@%sm, @a)_0| #b1)
     (=> f@.split_0 (and f@.split_0 f@_sm1_0))
     f@.split_0)))

(define-fun .def33 () Bool
  (= .cond9 (and main@entry
     true
     (bvugt @a_0 #x00000000)
     (bvugt @llvm.used_0 #x00000000)
     (= |select(main@%sm, @a)_0| #b0)
     (= |select(main@%sm1, @a)_0| #b0)
     (=> main@_0_0 (and main@_0_0 main@entry_0))
     main@_0_0)))

(define-fun .def34 () Bool
  (= .cond2 (and main@_0 true true)))

(define-fun .def35 () Bool
  (= .cond18 wait@f-ret-to-main@_0))

(define-fun .def36 () Bool
  (= .cond7 (and (or (and f@.split wait@f-ret-to-main@_0) (and main@_0 (not true)))
     true
     (=> main@_1_0 (and main@_1_0 main@_0_0))
     main@_1_0
     (=> (and f@.split wait@f-ret-to-main@_0)
         (= |select(main@%sh, @a)_0| |select(f@%sm, @a)|)))))

(define-fun .def37 () Bool
  (= .cond16 (let ((a!1 (=> main@g_0 (= main@%.b.i_0 (not (= |select(main@%sh, @a)| #b0)))))
      (a!2 (=> main@g_0
               (= main@%_3_0 ((_ zero_extend 31) (ite main@%.b.i_0 #b1 #b0))))))
  (and main@_1
       true
       (not main@%_2_0)
       (=> main@precall_0 (and main@precall_0 main@_1_0))
       (=> main@g_0 (and main@g_0 main@precall_0))
       a!1
       a!2
       (=> main@g_0 (not main@%.b.i_0))
       (=> main@_4_0 (and main@_4_0 main@g_0))
       (=> main@verifier.error_0 (and main@verifier.error_0 main@_4_0))
       (=> main@verifier.error.split_0
           (and main@verifier.error.split_0 main@verifier.error_0))
       main@verifier.error.split_0))))

(define-fun .trans () Bool
  (! (and .def19 .def20 .def21 .def22 .def23 .def24 .def25 .def26 .def27 .def28 .def29 .def30 .def31 .def32 .def33 .def34 .def35 .def36 .def37) :trans true))
; initial state
(define-fun .def38 () Bool (! (and main@entry (not f@_sm1) (not f@.split) (not main@_0) (not main@_1) (not main@verifier.error.split) (not wait@f-ret-to-main@_0)) :init true))
; property
(define-fun .def39 () Bool (! (not main@verifier.error.split) :invar-property 0))
