; RUN: euforia %s | OutputCheckSmt2 %s
; CHECK: ^true\(unreach-call\)$
; 20 state variables
; (including 7 locations)
(declare-fun f@%_br13 () (_ BitVec 32))
(declare-fun f@%_br13+ () (_ BitVec 32))
(define-fun .def0 () (_ BitVec 32) (! f@%_br13 :next f@%_br13+))
(declare-fun f@arg.0 () (_ BitVec 32))
(declare-fun f@arg.0+ () (_ BitVec 32))
(define-fun .def2 () (_ BitVec 32) (! f@arg.0 :next f@arg.0+))
(declare-fun f@arg.1 () (_ BitVec 32))
(declare-fun f@arg.1+ () (_ BitVec 32))
(define-fun .def4 () (_ BitVec 32) (! f@arg.1 :next f@arg.1+))
(declare-fun f@arg.2 () (_ BitVec 32))
(declare-fun f@arg.2+ () (_ BitVec 32))
(define-fun .def5 () (_ BitVec 32) (! f@arg.2 :next f@arg.2+))
(declare-fun f@_sm5 () Bool)
(declare-fun f@_sm5+ () Bool)
(define-fun .def6 () Bool (! f@_sm5 :next f@_sm5+))
(declare-fun f@.split () Bool)
(declare-fun f@.split+ () Bool)
(define-fun .def7 () Bool (! f@.split :next f@.split+))
(declare-fun main@%_3 () (_ BitVec 32))
(declare-fun main@%_3+ () (_ BitVec 32))
(define-fun .def8 () (_ BitVec 32) (! main@%_3 :next main@%_3+))
(declare-fun main@%sm2 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@%sm2+ () (Array (_ BitVec 32) (_ BitVec 32)))
(define-fun .def11 () (Array (_ BitVec 32) (_ BitVec 32)) (! main@%sm2 :next main@%sm2+))
(declare-fun main@%_2 () (_ BitVec 32))
(declare-fun main@%_2+ () (_ BitVec 32))
(define-fun .def12 () (_ BitVec 32) (! main@%_2 :next main@%_2+))
(declare-fun main@%sm4 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@%sm4+ () (Array (_ BitVec 32) (_ BitVec 32)))
(define-fun .def13 () (Array (_ BitVec 32) (_ BitVec 32)) (! main@%sm4 :next main@%sm4+))
(declare-fun main@%_12 () (_ BitVec 32))
(declare-fun main@%_12+ () (_ BitVec 32))
(define-fun .def14 () (_ BitVec 32) (! main@%_12 :next main@%_12+))
(declare-fun main@%sm1 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@%sm1+ () (Array (_ BitVec 32) (_ BitVec 32)))
(define-fun .def15 () (Array (_ BitVec 32) (_ BitVec 32)) (! main@%sm1 :next main@%sm1+))
(declare-fun main@%_1 () (_ BitVec 32))
(declare-fun main@%_1+ () (_ BitVec 32))
(define-fun .def16 () (_ BitVec 32) (! main@%_1 :next main@%_1+))
(declare-fun main@%_9 () (_ BitVec 32))
(declare-fun main@%_9+ () (_ BitVec 32))
(define-fun .def17 () (_ BitVec 32) (! main@%_9 :next main@%_9+))
(declare-fun main@%_10 () (_ BitVec 32))
(declare-fun main@%_10+ () (_ BitVec 32))
(define-fun .def18 () (_ BitVec 32) (! main@%_10 :next main@%_10+))
(declare-fun main@entry () Bool)
(declare-fun main@entry+ () Bool)
(define-fun .def19 () Bool (! main@entry :next main@entry+))
(declare-fun main@_11 () Bool)
(declare-fun main@_11+ () Bool)
(define-fun .def21 () Bool (! main@_11 :next main@_11+))
(declare-fun main@_13 () Bool)
(declare-fun main@_13+ () Bool)
(define-fun .def22 () Bool (! main@_13 :next main@_13+))
(declare-fun main@verifier.error.split () Bool)
(declare-fun main@verifier.error.split+ () Bool)
(define-fun .def23 () Bool (! main@verifier.error.split :next main@verifier.error.split+))
(declare-fun wait@f-ret-to-main@_11 () Bool)
(declare-fun wait@f-ret-to-main@_11+ () Bool)
(define-fun .def25 () Bool (! wait@f-ret-to-main@_11 :next wait@f-ret-to-main@_11+))
; 85 inputs
(declare-fun f@%_sm3_0 () (_ BitVec 32))
(declare-fun f@%_sm4_0 () (_ BitVec 32))
(declare-fun f@%shadow.mem.0.0_2 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun f@%sm6_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun f@%sm7_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun f@%sm8_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun f@%_call9_0 () (_ BitVec 32))
(declare-fun f@%sm_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun f@%_9_0 () (_ BitVec 32))
(declare-fun f@%_br_0 () Bool)
(declare-fun f@%_br13_0 () (_ BitVec 32))
(declare-fun f@_sm5_0 () Bool)
(declare-fun f@%sm5_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun f@%_call_0 () (_ BitVec 32))
(declare-fun f@%_call10_0 () (_ BitVec 32))
(declare-fun f@%_sm_0 () (_ BitVec 32))
(declare-fun f@%sm1_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun f@%sm2_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun f@_call12_0 () Bool)
(declare-fun f@%sm4_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun f@_call11_0 () Bool)
(declare-fun f@%sm3_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun f@_shadow.mem.0.0_0 () Bool)
(declare-fun f@%shadow.mem.0.0_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun f@%shadow.mem.0.0_1 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun f@.split_0 () Bool)
(declare-fun main@%_17_0 () (_ BitVec 32))
(declare-fun main@%_18_0 () (_ BitVec 32))
(declare-fun main@%_19_0 () Bool)
(declare-fun main@%_14_0 () (_ BitVec 32))
(declare-fun main@%_15_0 () Bool)
(declare-fun main@%_9_0 () (_ BitVec 32))
(declare-fun main@%_10_0 () (_ BitVec 32))
(declare-fun @llvm.used_0 () (_ BitVec 32))
(declare-fun main@%sm5_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@%sm6_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@%sm7_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@%_0_0 () (_ BitVec 32))
(declare-fun main@%_4_0 () (_ BitVec 32))
(declare-fun main@%_5_0 () (_ BitVec 32))
(declare-fun main@%_6_0 () (_ BitVec 32))
(declare-fun main@%_7_0 () (_ BitVec 32))
(declare-fun main@%sm_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@%_8_0 () (_ BitVec 32))
(declare-fun main@entry_0 () Bool)
(declare-fun main@%sm4_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@%_1_0 () (_ BitVec 32))
(declare-fun main@%_2_0 () (_ BitVec 32))
(declare-fun main@%_3_0 () (_ BitVec 32))
(declare-fun main@%sm1_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@%sm2_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@_11_0 () Bool)
(declare-fun main@%_12_0 () (_ BitVec 32))
(declare-fun main@_13_0 () Bool)
(declare-fun main@%sm3_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@_16_0 () Bool)
(declare-fun main@_20_0 () Bool)
(declare-fun main@verifier.error_0 () Bool)
(declare-fun main@verifier.error.split_0 () Bool)
(declare-fun .cond1 () Bool)
(declare-fun .cond3 () Bool)
(declare-fun .cond9 () Bool)
(declare-fun .cond10 () Bool)
(declare-fun .cond20 () Bool)
(declare-fun .cond24 () Bool)
(declare-fun .cond26 () Bool)
; transitions
(define-fun .def27 () Bool
  (= f@%_br13+ (ite .cond1 f@%_br13_0 f@%_br13)))

(define-fun .def28 () Bool
  (= f@arg.0+ (ite .cond3 main@%_9 (ite .cond1 f@arg.0 f@arg.0))))

(define-fun .def29 () Bool
  (= f@arg.1+ (ite .cond3 #x00000003 (ite .cond1 f@arg.1 f@arg.1))))

(define-fun .def30 () Bool
  (= f@arg.2+ (ite .cond3 main@%_10 (ite .cond1 f@arg.2 f@arg.2))))

(define-fun .def31 () Bool
  (= f@_sm5+ (ite .cond3 true false)))

(define-fun .def32 () Bool
  (= f@.split+ (ite .cond1 true false)))

(define-fun .def33 () Bool
  (= main@%_3+ (ite .cond10 main@%_3 (ite .cond9 main@%_3_0 main@%_3))))

(define-fun .def34 () Bool
  (= main@%sm2+ (ite .cond10 main@%sm2 (ite .cond9 main@%sm2_0 main@%sm2))))

(define-fun .def35 () Bool
  (= main@%_2+ (ite .cond10 main@%_2 (ite .cond9 main@%_2_0 main@%_2))))

(define-fun .def36 () Bool
  (= main@%sm4+ (ite .cond10 main@%sm4 (ite .cond9 main@%sm4_0 main@%sm4))))

(define-fun .def37 () Bool
  (= main@%_12+ (ite .cond10 main@%_12_0 main@%_12)))

(define-fun .def38 () Bool
  (= main@%sm1+ (ite .cond10 main@%sm1 (ite .cond9 main@%sm1_0 main@%sm1))))

(define-fun .def39 () Bool
  (= main@%_1+ (ite .cond10 main@%_1 (ite .cond9 main@%_1_0 main@%_1))))

(define-fun .def40 () Bool
  (= main@%_9+ (ite .cond9 main@%_9_0 main@%_9)))

(define-fun .def41 () Bool
  (= main@%_10+ (ite .cond9 main@%_10_0 main@%_10)))

(define-fun .def42 () Bool
  (= main@entry+ (ite .cond20 false false)))

(define-fun .def43 () Bool
  (= main@_11+ (ite .cond9 true false)))

(define-fun .def44 () Bool
  (= main@_13+ (ite .cond10 true false)))

(define-fun .def45 () Bool
  (= main@verifier.error.split+ (ite .cond24 true false)))

(define-fun .def46 () Bool
  (= wait@f-ret-to-main@_11+ (ite .cond10 false (ite .cond3 true (ite .cond26 true false)))))

(define-fun .def47 () Bool
  (= .cond20 true))

(define-fun .def48 () Bool
  (= .cond1 (and f@_sm5
     true
     (bvugt f@%_call_0 #x00000000)
     (bvugt f@%_call9_0 #x00000000)
     (bvugt f@%_call10_0 #x00000000)
     (bvugt f@%_sm_0 #x00000000)
     (= f@%sm_0 (store f@%sm7_0 f@%_call9_0 f@arg.0))
     (= f@%sm1_0 (store f@%sm6_0 f@%_call10_0 f@arg.1))
     (= f@%sm2_0 (store f@%sm8_0 f@%_sm_0 f@arg.2))
     (= f@%_9_0 (select f@%sm_0 f@%_call9_0))
     (= f@%_br_0 (not (= f@%_9_0 #x00000000)))
     (=> f@_call12_0 (and f@_call12_0 f@_sm5_0))
     (=> (and f@_call12_0 f@_sm5_0) (not f@%_br_0))
     (=> f@_call12_0 (= f@%_sm4_0 (select f@%sm2_0 f@%_sm_0)))
     (=> f@_call12_0 (= f@%sm4_0 (store f@%sm5_0 f@%_call_0 f@%_sm4_0)))
     (=> f@_call11_0 (and f@_call11_0 f@_sm5_0))
     (=> (and f@_call11_0 f@_sm5_0) f@%_br_0)
     (=> f@_call11_0 (= f@%_sm3_0 (select f@%sm1_0 f@%_call10_0)))
     (=> f@_call11_0 (= f@%sm3_0 (store f@%sm5_0 f@%_call_0 f@%_sm3_0)))
     (=> f@_shadow.mem.0.0_0
         (or (and f@_shadow.mem.0.0_0 f@_call12_0)
             (and f@_shadow.mem.0.0_0 f@_call11_0)))
     (=> (and f@_shadow.mem.0.0_0 f@_call12_0) (= f@%shadow.mem.0.0_0 f@%sm4_0))
     (=> (and f@_shadow.mem.0.0_0 f@_call11_0) (= f@%shadow.mem.0.0_1 f@%sm3_0))
     (=> (and f@_shadow.mem.0.0_0 f@_call12_0)
         (= f@%shadow.mem.0.0_2 f@%shadow.mem.0.0_0))
     (=> (and f@_shadow.mem.0.0_0 f@_call11_0)
         (= f@%shadow.mem.0.0_2 f@%shadow.mem.0.0_1))
     (=> f@_shadow.mem.0.0_0
         (= f@%_br13_0 (select f@%shadow.mem.0.0_2 f@%_call_0)))
     (=> f@.split_0 (and f@.split_0 f@_shadow.mem.0.0_0))
     f@.split_0)))

(define-fun .def49 () Bool
  (= .cond9 (and main@entry
     true
     (bvugt @llvm.used_0 #x00000000)
     (bvugt main@%_0_0 #x00000000)
     (bvugt main@%_1_0 #x00000000)
     (bvugt main@%_2_0 #x00000000)
     (bvugt main@%_3_0 #x00000000)
     (= main@%_4_0 main@%_0_0)
     (= main@%_5_0 main@%_1_0)
     (= main@%_6_0 main@%_2_0)
     (= main@%_7_0 main@%_3_0)
     (= main@%sm_0 (store main@%sm5_0 main@%_0_0 #x00000000))
     (= main@%sm1_0 (store main@%sm7_0 main@%_1_0 #x00000011))
     (= main@%sm2_0 (store main@%sm6_0 main@%_2_0 main@%_8_0))
     (= main@%_9_0 (select main@%sm1_0 main@%_1_0))
     (= main@%_10_0 (select main@%sm2_0 main@%_2_0))
     (=> main@_11_0 (and main@_11_0 main@entry_0))
     main@_11_0)))

(define-fun .def50 () Bool
  (= .cond3 (and main@_11 true true)))

(define-fun .def51 () Bool
  (= .cond26 wait@f-ret-to-main@_11))

(define-fun .def52 () Bool
  (= .cond10 (and (or (and f@.split wait@f-ret-to-main@_11) (and main@_11 (not true)))
     true
     (=> main@_13_0 (and main@_13_0 main@_11_0))
     main@_13_0
     (=> (and f@.split wait@f-ret-to-main@_11) (= main@%_12_0 f@%_br13)))))

(define-fun .def53 () Bool
  (= .cond24 (and main@_13
     true
     (= main@%sm3_0 (store main@%sm4 main@%_3 main@%_12))
     (= main@%_14_0 (select main@%sm1 main@%_1))
     (= main@%_15_0 (not (= main@%_14_0 #x00000000)))
     (not main@%_15_0)
     (=> main@_16_0 (and main@_16_0 main@_13_0))
     (=> main@_16_0 (= main@%_17_0 (select main@%sm3_0 main@%_3)))
     (=> main@_16_0 (= main@%_18_0 (select main@%sm2 main@%_2)))
     (=> main@_16_0 (= main@%_19_0 (= main@%_17_0 main@%_18_0)))
     (=> main@_16_0 (not main@%_19_0))
     (=> main@_20_0 (and main@_20_0 main@_16_0))
     (=> main@verifier.error_0 (and main@verifier.error_0 main@_20_0))
     (=> main@verifier.error.split_0
         (and main@verifier.error.split_0 main@verifier.error_0))
     main@verifier.error.split_0)))

(define-fun .trans () Bool
  (! (and .def27 .def28 .def29 .def30 .def31 .def32 .def33 .def34 .def35 .def36 .def37 .def38 .def39 .def40 .def41 .def42 .def43 .def44 .def45 .def46 .def47 .def48 .def49 .def50 .def51 .def52 .def53) :trans true))
; initial state
(define-fun .def54 () Bool (! (and main@entry (not f@_sm5) (not f@.split) (not main@_11) (not main@_13) (not main@verifier.error.split) (not wait@f-ret-to-main@_11)) :init true))
; property
(define-fun .def55 () Bool (! (not main@verifier.error.split) :invar-property 0))
