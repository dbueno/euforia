; RUN: euforia %s | OutputCheckSmt2 %s
; CHECK: ^true\(unreach-call\)$
; filename: "../../vmt2/examples/uautomizer_pex1_safe.c"
(set-info :source |Printed by VMT_Standalone 0.1 [taco]|)
; state variable decarations
(declare-fun %p.0-main* () (_ BitVec 32))
(declare-fun %p.0-main*+ () (_ BitVec 32))
(declare-fun %call-main* () (_ BitVec 32))
(declare-fun %call-main*+ () (_ BitVec 32))
(declare-fun @L0* () Bool)
(declare-fun @L0*+ () Bool)
(declare-fun %n.0-main* () (_ BitVec 32))
(declare-fun %n.0-main*+ () (_ BitVec 32))
(declare-fun %call1-main* () (_ BitVec 32))
(declare-fun %call1-main*+ () (_ BitVec 32))
(declare-fun @L9* () Bool)
(declare-fun @L9*+ () Bool)
(declare-fun @L8* () Bool)
(declare-fun @L8*+ () Bool)
(declare-fun @L4* () Bool)
(declare-fun @L4*+ () Bool)
; aux variable declarations
(declare-fun @L3 () Bool)
(declare-fun %cmp2-main () Bool)
(declare-fun %dec-main () (_ BitVec 32))
(declare-fun %.p.0-main () (_ BitVec 32))
(declare-fun %cmp5-main () Bool)
(declare-fun @L7 () Bool)
(declare-fun @L6 () Bool)
(declare-fun %cmp3-main () Bool)
(declare-fun @L5 () Bool)
(declare-fun %cmp-main () Bool)
(declare-fun @L2 () Bool)
(declare-fun @L1 () Bool)
; input variable decarations
(declare-fun call1-$Y32-1 () (_ BitVec 32))
(declare-fun call-$Y32-0 () (_ BitVec 32))
; :next defs for state vars
(define-fun .def0 () (_ BitVec 32) (! %p.0-main* :next %p.0-main*+))
(define-fun .def1 () (_ BitVec 32) (! %call-main* :next %call-main*+))
(define-fun .def2 () Bool (! @L0* :next @L0*+))
(define-fun .def3 () (_ BitVec 32) (! %n.0-main* :next %n.0-main*+))
(define-fun .def4 () (_ BitVec 32) (! %call1-main* :next %call1-main*+))
(define-fun .def5 () Bool (! @L9* :next @L9*+))
(define-fun .def6 () Bool (! @L8* :next @L8*+))
(define-fun .def7 () Bool (! @L4* :next @L4*+))
; initial state
(define-fun .def8 () Bool (= %n.0-main* #x00000000))
(define-fun .def9 () Bool (= %call1-main* #x00000000))
(define-fun .def10 () Bool (= %p.0-main* #x00000000))
(define-fun .def11 () Bool (= %call-main* #x00000000))
(define-fun .def12 () Bool (not @L4*))
(define-fun .def13 () Bool (not @L9*))
(define-fun .def14 () Bool (not @L8*))
(define-fun .def15 () Bool (and @L0* .def14 .def13 .def12 .def11 .def10 .def9 .def8))
(define-fun .def16 () Bool (! .def15 :init true))
; transition relation
(define-fun .def17 () Bool (= %call-main*+ %call-main*))
(define-fun .def18 () Bool (or @L1 .def17))
(define-fun .def19 () Bool (= %call1-main*+ %call1-main*))
(define-fun .def20 () Bool (or @L1 .def19))
(define-fun .def21 () Bool (= %n.0-main*+ %n.0-main*))
(define-fun .def22 () Bool (or @L4*+ .def21))
(define-fun .def23 () Bool (= %p.0-main*+ %p.0-main*))
(define-fun .def24 () Bool (or @L4*+ .def23))
(define-fun .def25 () Bool (or @L3 @L9*))
(define-fun .def26 () Bool (= @L9*+ .def25))
(define-fun .def27 () Bool (not %cmp3-main))
(define-fun .def28 () Bool (and @L6 .def27))
(define-fun .def29 () Bool (or .def28 @L8*))
(define-fun .def30 () Bool (= @L8*+ .def29))
(define-fun .def31 () Bool (= %cmp5-main .def8))
(define-fun .def32 () (_ BitVec 32) (ite %cmp5-main #x00000000 %p.0-main*))
(define-fun .def33 () Bool (= %.p.0-main .def32))
(define-fun .def34 () (_ BitVec 32) (bvadd #xffffffff %n.0-main*))
(define-fun .def35 () Bool (= %dec-main .def34))
(define-fun .def36 () Bool (and @L6 %cmp3-main))
(define-fun .def37 () Bool (= @L7 .def36))
(define-fun .def38 () Bool (not .def10))
(define-fun .def39 () Bool (= %cmp3-main .def38))
(define-fun .def40 () Bool (and @L5 %cmp2-main))
(define-fun .def41 () Bool (= @L6 .def40))
(define-fun .def42 () Bool (bvsle #x00000000 %n.0-main*))
(define-fun .def43 () Bool (= %cmp2-main .def42))
(define-fun .def44 () Bool (= @L5 @L4*))
(define-fun .def45 () (_ BitVec 32) (ite @L1 call1-$Y32-1 %call1-main*))
(define-fun .def46 () (_ BitVec 32) (ite @L2 .def45 %dec-main))
(define-fun .def47 () Bool (= %n.0-main*+ .def46))
(define-fun .def48 () Bool (not @L4*+))
(define-fun .def49 () Bool (or .def48 .def47))
(define-fun .def50 () (_ BitVec 32) (ite @L1 call-$Y32-0 %call-main*))
(define-fun .def51 () (_ BitVec 32) (ite @L2 .def50 %.p.0-main))
(define-fun .def52 () Bool (= %p.0-main*+ .def51))
(define-fun .def53 () Bool (or .def48 .def52))
(define-fun .def54 () Bool (or @L2 @L7))
(define-fun .def55 () Bool (= @L4*+ .def54))
(define-fun .def56 () Bool (not %cmp2-main))
(define-fun .def57 () Bool (and @L5 .def56))
(define-fun .def58 () Bool (not %cmp-main))
(define-fun .def59 () Bool (and @L1 .def58))
(define-fun .def60 () Bool (or .def59 .def57))
(define-fun .def61 () Bool (= @L3 .def60))
(define-fun .def62 () Bool (and @L1 %cmp-main))
(define-fun .def63 () Bool (= @L2 .def62))
(define-fun .def64 () Bool (= %call-main*+ call-$Y32-0))
(define-fun .def65 () Bool (not @L1))
(define-fun .def66 () Bool (or .def65 .def64))
(define-fun .def67 () Bool (= .def50 #x00000000))
(define-fun .def68 () Bool (not .def67))
(define-fun .def69 () Bool (= %cmp-main .def68))
(define-fun .def70 () Bool (= %call1-main*+ call1-$Y32-1))
(define-fun .def71 () Bool (or .def65 .def70))
(define-fun .def72 () Bool (= @L1 @L0*))
(define-fun .def73 () Bool (not @L0*+))
(define-fun .def74 () Bool (and .def73 .def72))
(define-fun .def75 () Bool (and .def74 .def71))
(define-fun .def76 () Bool (and .def75 .def69))
(define-fun .def77 () Bool (and .def76 .def66))
(define-fun .def78 () Bool (and .def77 .def63))
(define-fun .def79 () Bool (and .def78 .def61))
(define-fun .def80 () Bool (and .def79 .def55))
(define-fun .def81 () Bool (and .def80 .def53))
(define-fun .def82 () Bool (and .def81 .def49))
(define-fun .def83 () Bool (and .def82 .def44))
(define-fun .def84 () Bool (and .def83 .def43))
(define-fun .def85 () Bool (and .def84 .def41))
(define-fun .def86 () Bool (and .def85 .def39))
(define-fun .def87 () Bool (and .def86 .def37))
(define-fun .def88 () Bool (and .def87 .def35))
(define-fun .def89 () Bool (and .def88 .def33))
(define-fun .def90 () Bool (and .def89 .def31))
(define-fun .def91 () Bool (and .def90 .def30))
(define-fun .def92 () Bool (and .def91 .def26))
(define-fun .def93 () Bool (and .def92 .def24))
(define-fun .def94 () Bool (and .def93 .def22))
(define-fun .def95 () Bool (and .def94 .def20))
(define-fun .def96 () Bool (and .def95 .def18))
(define-fun .def97 () Bool (! .def96 :trans true))
; property
(define-fun .def98 () Bool (! .def14 :invar-property 0))
(assert true)
