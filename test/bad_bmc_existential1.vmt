; RUN: euforia %s | OutputCheckSmt2 %s
; CHECK: ^false\(unreach-call\)$
    (declare-fun main@b.g-c-7 () (_ BitVec 64)) (declare-fun main@b.g-c-7+ () (_ BitVec 64)) (define-fun d () (_ BitVec 4) (! main@b.g-c-7 :next main@b.g-c-7+)   )    (declare-fun at-main@e.i () Bool) (declare-fun at-main@e.i+ () Bool) (define-fun f () Bool (! at-main@e.i :next at-main@e.i+)) (declare-fun at-main@b.g () Bool) (declare-fun at-main@b.g+ () Bool) (define-fun h () Bool (! at-main@b.g :next at-main@b.g+)) (declare-fun main@b.g-c-12 () (Array (_ BitVec 64) (_ BitVec 64))) (declare-fun main@b.g-c-12+ () (Array (_ BitVec 64) (_ BitVec 64))) (define-fun j () (Array (_ BitVec 4) (_ BitVec 4)) (! main@b.g-c-12 :next main@b.g-c-12+)) (declare-fun m-11 () Bool)    (declare-fun arr-l-l-input-81 () (Array (_ BitVec 64) (_ BitVec 64))   ) (declare-fun -7 () (_ BitVec 64     )  )  (declare-fun arr-l-l-input-4 () (Array (_ BitVec 64) (_ BitVec 64))) (declare-fun m-10 () Bool  )   (declare-fun m-9 () Bool ) (declare-fun arr-l-l-input-17 () (Array (_ BitVec 64) (_ BitVec 64) )      )   (declare-fun m() Bool) (declare-fun l-input-19 () (_ BitVec 64))   (declare-fun l-input-20 () (_ BitVec 64 ) )     (declare-fun arr-l-l-input-9 () (Array (_ BitVec 64) (_ BitVec 64))) (declare-fun l-input-18 () (_ BitVec 64  ) )  (declare-fun bool() Bool       )   (define-fun k () Bool (! (and             (not at-main@e.i)                  (not at-main@b.g)) :init true)) (define-fun n () Bool (! (let ((a!5 (and                                                                                                                                                                                                                              (= bool                     (= l-input-18 main@b.g-c-7(select main@b.g-c-12 l-input-18))(= (= l-input-19                                                         
#x0000000000000000)bool))                 at-main@b.g                 ))
      (a!11 (and (= arr-l-l-input-9                     (store arr-l-l-input-4                            l-input-20                                                                                    
#x0000000000000000))
                                                                                                           (=  bool                                            (= arr-l-l-input-9                                                                                                                                    arr-l-l-input-17 ))))) (let ((!17 0))   (andmain@b.g-c-12+           (ite m-10                arr-l-l-input-81                (ite m arr-l-l-input-17 main@b.g-c-12)))        (= at-main@e.i+ (ite m-11 true false))                                                                                                                (= at-main@b.g+ (ite m-10 true (ite m-9 true false)))        (= main@b.g-c-7+           (ite m-10                -7                (ite m l-input-20 -7)))                                                (= m-11 a!5)                (= m-9 a!11)                ))) :trans true)) (define-fun o () Bool (! (not at-main@e.i) :invar-property 0)) 
