; RUN: euforia %s | OutputCheckSmt2 %s
; CHECK: ^false\(unreach-call\)$
; state variables
(declare-fun main@%shadow.mem.4.0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@%shadow.mem.4.0+ () (Array (_ BitVec 32) (_ BitVec 32)))
(define-fun .def0 () (Array (_ BitVec 32) (_ BitVec 32)) (! main@%shadow.mem.4.0 :next main@%shadow.mem.4.0+))
(declare-fun main@%_1 () (_ BitVec 32))
(declare-fun main@%_1+ () (_ BitVec 32))
(define-fun .def3 () (_ BitVec 32) (! main@%_1 :next main@%_1+))
(declare-fun main@entry () Bool)
(declare-fun main@entry+ () Bool)
(define-fun .def4 () Bool (! main@entry :next main@entry+))
(declare-fun main@_4 () Bool)
(declare-fun main@_4+ () Bool)
(define-fun .def6 () Bool (! main@_4 :next main@_4+))
(declare-fun main@verifier.error.split () Bool)
(declare-fun main@verifier.error.split+ () Bool)
(define-fun .def7 () Bool (! main@verifier.error.split :next main@verifier.error.split+))
; inputs
(declare-fun main@%_9_0 () (_ BitVec 32))
(declare-fun main@%_10_0 () (_ BitVec 32))
(declare-fun main@%_5_0 () (_ BitVec 32))
(declare-fun main@%_6_0 () Bool)
(declare-fun @llvm.used_0 () (_ BitVec 32))
(declare-fun main@%sm3_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@%sm4_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@%_0_0 () (_ BitVec 32))
(declare-fun main@%_2_0 () (_ BitVec 32))
(declare-fun main@%_3_0 () (_ BitVec 32))
(declare-fun main@%sm_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@entry_0 () Bool)
(declare-fun main@%_1_0 () (_ BitVec 32))
(declare-fun main@%sm1_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@_4_0 () Bool)
(declare-fun main@%shadow.mem.4.0_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@%shadow.mem.4.0_1 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@_8_0 () Bool)
(declare-fun main@%sm2_0 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@_4_1 () Bool)
(declare-fun main@%shadow.mem.4.0_2 () (Array (_ BitVec 32) (_ BitVec 32)))
(declare-fun main@_7_0 () Bool)
(declare-fun main@verifier.error_0 () Bool)
(declare-fun main@verifier.error.split_0 () Bool)
(declare-fun .cond1 () Bool)
(declare-fun .cond2 () Bool)
(declare-fun .cond5 () Bool)
(declare-fun .cond8 () Bool)
; transitions
(define-fun .def9 () Bool
  (= main@%shadow.mem.4.0+ (ite .cond2
     main@%shadow.mem.4.0_2
     (ite .cond1 main@%shadow.mem.4.0_1 main@%shadow.mem.4.0))))

(define-fun .def10 () Bool
  (= main@%_1+ (ite .cond2 main@%_1_0 (ite .cond1 main@%_1_0 main@%_1))))

(define-fun .def11 () Bool
  (= main@entry+ (ite .cond5 false false)))

(define-fun .def12 () Bool
  (= main@_4+ (ite .cond2 true (ite .cond1 true false))))

(define-fun .def13 () Bool
  (= main@verifier.error.split+ (ite .cond8 true false)))

(define-fun .def14 () Bool
  (= .cond5 true))

(define-fun .def15 () Bool
  (= .cond1 (and main@entry
     true
     true
     (bvugt @llvm.used_0 #x00000000)
     (bvugt main@%_0_0 #x00000000)
     (bvugt main@%_1_0 #x00000000)
     (= main@%_2_0 main@%_0_0)
     (= main@%_3_0 main@%_1_0)
     (= main@%sm_0 (store main@%sm3_0 main@%_0_0 #x00000000))
     (= main@%sm1_0 (store main@%sm4_0 main@%_1_0 #x00000000))
     (=> main@_4_0 (and main@_4_0 main@entry_0))
     (=> (and main@_4_0 main@entry_0) (= main@%shadow.mem.4.0_0 main@%sm1_0))
     (=> (and main@_4_0 main@entry_0)
         (= main@%shadow.mem.4.0_1 main@%shadow.mem.4.0_0))
     main@_4_0)))

(define-fun .def16 () Bool
  (= .cond2 (and main@_4
     (= main@%shadow.mem.4.0 main@%shadow.mem.4.0_0)
     (= main@%_1 main@%_1_0)
     true
     (= main@%_5_0 (select main@%shadow.mem.4.0_0 main@%_1_0))
     (= main@%_6_0 (bvslt main@%_5_0 #x00000007))
     (=> main@_8_0 (and main@_8_0 main@_4_0))
     (=> (and main@_8_0 main@_4_0) main@%_6_0)
     (=> main@_8_0 (= main@%_9_0 (select main@%shadow.mem.4.0_0 main@%_1_0)))
     (=> main@_8_0 (= main@%_10_0 (bvadd main@%_9_0 #x00000003)))
     (=> main@_8_0
         (= main@%sm2_0 (store main@%shadow.mem.4.0_0 main@%_1_0 main@%_10_0)))
     (=> main@_4_1 (and main@_4_1 main@_8_0))
     (=> (and main@_4_1 main@_8_0) (= main@%shadow.mem.4.0_1 main@%sm2_0))
     (=> (and main@_4_1 main@_8_0)
         (= main@%shadow.mem.4.0_2 main@%shadow.mem.4.0_1))
     main@_4_1)))

(define-fun .def17 () Bool
  (= .cond8 (and main@_4
     (= main@%shadow.mem.4.0 main@%shadow.mem.4.0_0)
     (= main@%_1 main@%_1_0)
     true
     (= main@%_5_0 (select main@%shadow.mem.4.0_0 main@%_1_0))
     (= main@%_6_0 (bvslt main@%_5_0 #x00000007))
     (=> main@_7_0 (and main@_7_0 main@_4_0))
     (=> (and main@_7_0 main@_4_0) (not main@%_6_0))
     (=> main@verifier.error_0 (and main@verifier.error_0 main@_7_0))
     (=> main@verifier.error.split_0
         (and main@verifier.error.split_0 main@verifier.error_0))
     main@verifier.error.split_0)))

(define-fun .trans () Bool
  (! (and .def9 .def10 .def11 .def12 .def13 .def14 .def15 .def16 .def17) :trans true))
; initial state
(define-fun .def18 () Bool (! (and main@entry (not main@_4) (not main@verifier.error.split)) :init true))
; property
(define-fun .def19 () Bool (! (not main@verifier.error.split) :invar-property 0))
