; RUN: euforia %s | OutputCheckSmt2 %s
; CHECK: ^false\(unreach-call\)$
; filename: "slam_locks_unsafe.c"
(set-info :source |Printed by VMT_Standalone 0.1 [taco]|)
; state variable decarations
(declare-fun %nPackets.0-main* () (_ BitVec 32))
(declare-fun %nPackets.0-main*+ () (_ BitVec 32))
(declare-fun %call1-main* () (_ BitVec 32))
(declare-fun %call1-main*+ () (_ BitVec 32))
(declare-fun %call-main* () (_ BitVec 32))
(declare-fun %call-main*+ () (_ BitVec 32))
(declare-fun %lock.2-main* () (_ BitVec 32))
(declare-fun %lock.2-main*+ () (_ BitVec 32))
(declare-fun %call.i-main* () (_ BitVec 32))
(declare-fun %call.i-main*+ () (_ BitVec 32))
(declare-fun %call.i4-main* () (_ BitVec 32))
(declare-fun %call.i4-main*+ () (_ BitVec 32))
(declare-fun %nPackets.1-main* () (_ BitVec 32))
(declare-fun %nPackets.1-main*+ () (_ BitVec 32))
(declare-fun @L14* () Bool)
(declare-fun @L14*+ () Bool)
(declare-fun @L15* () Bool)
(declare-fun @L15*+ () Bool)
(declare-fun @L10* () Bool)
(declare-fun @L10*+ () Bool)
(declare-fun @L8* () Bool)
(declare-fun @L8*+ () Bool)
(declare-fun @L6* () Bool)
(declare-fun @L6*+ () Bool)
(declare-fun @L5* () Bool)
(declare-fun @L5*+ () Bool)
(declare-fun @L2* () Bool)
(declare-fun @L2*+ () Bool)
(declare-fun %lock.0-main* () (_ BitVec 32))
(declare-fun %lock.0-main*+ () (_ BitVec 32))
(declare-fun @L0* () Bool)
(declare-fun @L0*+ () Bool)
; aux variable declarations
(declare-fun %cmp.i-main () Bool)
(declare-fun %or.cond-main () Bool)
(declare-fun %tobool-main () Bool)
(declare-fun %cmp.i1-main () Bool)
(declare-fun %tobool2-main () Bool)
(declare-fun %.-main () (_ BitVec 32))
(declare-fun %cmp5-main () Bool)
(declare-fun @L9 () Bool)
(declare-fun @L13 () Bool)
(declare-fun @L12 () Bool)
(declare-fun @L11 () Bool)
(declare-fun %cmp.i3-main () Bool)
(declare-fun @L3 () Bool)
(declare-fun %tobool.i-main () Bool)
(declare-fun %inc-main () (_ BitVec 32))
(declare-fun @L4 () Bool)
(declare-fun @L7 () Bool)
(declare-fun @L1 () Bool)
; input variable decarations
(declare-fun call-$Y32-2 () (_ BitVec 32))
(declare-fun call.i-$Y32-1 () (_ BitVec 32))
(declare-fun call1-$Y32-3 () (_ BitVec 32))
(declare-fun call.i4-$Y32-0 () (_ BitVec 32))
; :next defs for state vars
(define-fun .def0 () (_ BitVec 32) (! %nPackets.0-main* :next %nPackets.0-main*+))
(define-fun .def1 () (_ BitVec 32) (! %call1-main* :next %call1-main*+))
(define-fun .def2 () (_ BitVec 32) (! %call-main* :next %call-main*+))
(define-fun .def3 () (_ BitVec 32) (! %lock.2-main* :next %lock.2-main*+))
(define-fun .def4 () (_ BitVec 32) (! %call.i-main* :next %call.i-main*+))
(define-fun .def5 () (_ BitVec 32) (! %call.i4-main* :next %call.i4-main*+))
(define-fun .def6 () (_ BitVec 32) (! %nPackets.1-main* :next %nPackets.1-main*+))
(define-fun .def7 () Bool (! @L14* :next @L14*+))
(define-fun .def8 () Bool (! @L15* :next @L15*+))
(define-fun .def9 () Bool (! @L10* :next @L10*+))
(define-fun .def10 () Bool (! @L8* :next @L8*+))
(define-fun .def11 () Bool (! @L6* :next @L6*+))
(define-fun .def12 () Bool (! @L5* :next @L5*+))
(define-fun .def13 () Bool (! @L2* :next @L2*+))
(define-fun .def14 () (_ BitVec 32) (! %lock.0-main* :next %lock.0-main*+))
(define-fun .def15 () Bool (! @L0* :next @L0*+))
; initial state
(define-fun .def16 () Bool (= %call.i4-main* #x00000000))
(define-fun .def17 () Bool (= %lock.0-main* #x00000000))
(define-fun .def18 () Bool (= %nPackets.1-main* #x00000000))
(define-fun .def19 () Bool (= %lock.2-main* #x00000000))
(define-fun .def20 () Bool (= %call-main* #x00000000))
(define-fun .def21 () Bool (= %call.i-main* #x00000000))
(define-fun .def22 () Bool (= %call1-main* #x00000000))
(define-fun .def23 () Bool (= %nPackets.0-main* #x00000000))
(define-fun .def24 () Bool (not @L2*))
(define-fun .def25 () Bool (not @L8*))
(define-fun .def26 () Bool (not @L15*))
(define-fun .def27 () Bool (not @L5*))
(define-fun .def28 () Bool (not @L14*))
(define-fun .def29 () Bool (not @L6*))
(define-fun .def30 () Bool (not @L10*))
(define-fun .def31 () Bool (and @L0* .def30 .def29 .def28 .def27 .def26 .def25 .def24 .def23 .def22 .def21 .def20 .def19 .def18 .def17 .def16))
(define-fun .def32 () Bool (! .def31 :init true))
; transition relation
(define-fun .def33 () Bool (= %nPackets.0-main*+ %nPackets.0-main*))
(define-fun .def34 () Bool (or @L2*+ .def33))
(define-fun .def35 () Bool (= %call.i4-main*+ %call.i4-main*))
(define-fun .def36 () Bool (or @L13 .def35))
(define-fun .def37 () Bool (= %lock.0-main*+ %lock.0-main*))
(define-fun .def38 () Bool (or @L2*+ .def37))
(define-fun .def39 () Bool (= %call-main*+ %call-main*))
(define-fun .def40 () Bool (or @L4 .def39))
(define-fun .def41 () Bool (= %call.i-main*+ %call.i-main*))
(define-fun .def42 () Bool (or @L9 .def41))
(define-fun .def43 () Bool (= %lock.2-main*+ %lock.2-main*))
(define-fun .def44 () Bool (or @L8*+ .def43))
(define-fun .def45 () Bool (= %nPackets.1-main*+ %nPackets.1-main*))
(define-fun .def46 () Bool (or @L8*+ .def45))
(define-fun .def47 () Bool (= %call1-main*+ %call1-main*))
(define-fun .def48 () Bool (or @L4 .def47))
(define-fun .def49 () Bool (or @L13 @L15*))
(define-fun .def50 () Bool (= @L15*+ .def49))
(define-fun .def51 () Bool (not %cmp.i3-main))
(define-fun .def52 () Bool (and @L12 .def51))
(define-fun .def53 () Bool (= @L14*+ .def52))
(define-fun .def54 () Bool (= %call.i4-main*+ call.i4-$Y32-0))
(define-fun .def55 () Bool (not @L13))
(define-fun .def56 () Bool (or .def55 .def54))
(define-fun .def57 () Bool (and @L12 %cmp.i3-main))
(define-fun .def58 () Bool (= @L13 .def57))
(define-fun .def59 () Bool (= %lock.2-main* #x00000001))
(define-fun .def60 () Bool (= %cmp.i3-main .def59))
(define-fun .def61 () Bool (not %cmp5-main))
(define-fun .def62 () Bool (and @L11 .def61))
(define-fun .def63 () Bool (= @L12 .def62))
(define-fun .def64 () Bool (= %nPackets.0-main* %nPackets.1-main*))
(define-fun .def65 () Bool (not .def64))
(define-fun .def66 () Bool (= %cmp5-main .def65))
(define-fun .def67 () Bool (= @L11 @L8*))
(define-fun .def68 () Bool (not %cmp.i1-main))
(define-fun .def69 () Bool (and @L7 .def68))
(define-fun .def70 () Bool (= @L10*+ .def69))
(define-fun .def71 () Bool (= %call.i-main*+ call.i-$Y32-1))
(define-fun .def72 () Bool (not @L9))
(define-fun .def73 () Bool (or .def72 .def71))
(define-fun .def74 () (_ BitVec 32) (bvadd #x00000001 %nPackets.0-main*))
(define-fun .def75 () Bool (= %inc-main .def74))
(define-fun .def76 () (_ BitVec 32) (ite @L9 call.i-$Y32-1 %call.i-main*))
(define-fun .def77 () Bool (= .def76 #x00000000))
(define-fun .def78 () Bool (not .def77))
(define-fun .def79 () Bool (= %tobool.i-main .def78))
(define-fun .def80 () (_ BitVec 32) (ite %tobool.i-main #x00000000 #x00000001))
(define-fun .def81 () Bool (= %.-main .def80))
(define-fun .def82 () Bool (and @L7 %cmp.i1-main))
(define-fun .def83 () Bool (= @L9 .def82))
(define-fun .def84 () (_ BitVec 32) (ite @L9 %inc-main %nPackets.0-main*))
(define-fun .def85 () Bool (= %nPackets.1-main*+ .def84))
(define-fun .def86 () Bool (not @L8*+))
(define-fun .def87 () Bool (or .def86 .def85))
(define-fun .def88 () (_ BitVec 32) (ite @L9 %.-main #x00000001))
(define-fun .def89 () Bool (= %lock.2-main*+ .def88))
(define-fun .def90 () Bool (or .def86 .def89))
(define-fun .def91 () Bool (not %or.cond-main))
(define-fun .def92 () Bool (and @L4 .def91))
(define-fun .def93 () Bool (or .def92 @L9))
(define-fun .def94 () Bool (= @L8*+ .def93))
(define-fun .def95 () Bool (and @L4 %or.cond-main))
(define-fun .def96 () Bool (= @L7 .def95))
(define-fun .def97 () Bool (or @L10* @L14*))
(define-fun .def98 () Bool (or @L6* .def97))
(define-fun .def99 () Bool (or @L5* .def98))
(define-fun .def100 () Bool (= @L6*+ .def99))
(define-fun .def101 () Bool (not %cmp.i-main))
(define-fun .def102 () Bool (and @L3 .def101))
(define-fun .def103 () Bool (= @L5*+ .def102))
(define-fun .def104 () Bool (= %call-main*+ call-$Y32-2))
(define-fun .def105 () Bool (not @L4))
(define-fun .def106 () Bool (or .def105 .def104))
(define-fun .def107 () Bool (= %call1-main*+ call1-$Y32-3))
(define-fun .def108 () Bool (or .def105 .def107))
(define-fun .def109 () (_ BitVec 32) (ite @L4 call-$Y32-2 %call-main*))
(define-fun .def110 () Bool (= .def109 #x00000000))
(define-fun .def111 () Bool (not .def110))
(define-fun .def112 () Bool (= %tobool-main .def111))
(define-fun .def113 () Bool (and %tobool-main %tobool2-main))
(define-fun .def114 () Bool (= %or.cond-main .def113))
(define-fun .def115 () (_ BitVec 32) (ite @L4 call1-$Y32-3 %call1-main*))
(define-fun .def116 () Bool (= .def115 #x00000000))
(define-fun .def117 () Bool (not .def116))
(define-fun .def118 () Bool (= %tobool2-main .def117))
(define-fun .def119 () Bool (and @L3 %cmp.i-main))
(define-fun .def120 () Bool (= @L4 .def119))
(define-fun .def121 () Bool (= %cmp.i-main .def17))
(define-fun .def122 () Bool (= @L3 @L2*))
(define-fun .def123 () (_ BitVec 32) (ite @L1 #x00000000 %nPackets.1-main*))
(define-fun .def124 () Bool (= %nPackets.0-main*+ .def123))
(define-fun .def125 () Bool (not @L2*+))
(define-fun .def126 () Bool (or .def125 .def124))
(define-fun .def127 () (_ BitVec 32) (ite @L1 #x00000000 %lock.2-main*))
(define-fun .def128 () Bool (= %lock.0-main*+ .def127))
(define-fun .def129 () Bool (or .def125 .def128))
(define-fun .def130 () Bool (and @L11 %cmp5-main))
(define-fun .def131 () Bool (or @L1 .def130))
(define-fun .def132 () Bool (= @L2*+ .def131))
(define-fun .def133 () Bool (= @L1 @L0*))
(define-fun .def134 () Bool (not @L0*+))
(define-fun .def135 () Bool (and .def134 .def133))
(define-fun .def136 () Bool (and .def135 .def132))
(define-fun .def137 () Bool (and .def136 .def129))
(define-fun .def138 () Bool (and .def137 .def126))
(define-fun .def139 () Bool (and .def138 .def122))
(define-fun .def140 () Bool (and .def139 .def121))
(define-fun .def141 () Bool (and .def140 .def120))
(define-fun .def142 () Bool (and .def141 .def118))
(define-fun .def143 () Bool (and .def142 .def114))
(define-fun .def144 () Bool (and .def143 .def112))
(define-fun .def145 () Bool (and .def144 .def108))
(define-fun .def146 () Bool (and .def145 .def106))
(define-fun .def147 () Bool (and .def146 .def103))
(define-fun .def148 () Bool (and .def147 .def100))
(define-fun .def149 () Bool (and .def148 .def96))
(define-fun .def150 () Bool (and .def149 %cmp.i1-main))
(define-fun .def151 () Bool (and .def150 .def94))
(define-fun .def152 () Bool (and .def151 .def90))
(define-fun .def153 () Bool (and .def152 .def87))
(define-fun .def154 () Bool (and .def153 .def83))
(define-fun .def155 () Bool (and .def154 .def81))
(define-fun .def156 () Bool (and .def155 .def79))
(define-fun .def157 () Bool (and .def156 .def75))
(define-fun .def158 () Bool (and .def157 .def73))
(define-fun .def159 () Bool (and .def158 .def70))
(define-fun .def160 () Bool (and .def159 .def67))
(define-fun .def161 () Bool (and .def160 .def66))
(define-fun .def162 () Bool (and .def161 .def63))
(define-fun .def163 () Bool (and .def162 .def60))
(define-fun .def164 () Bool (and .def163 .def58))
(define-fun .def165 () Bool (and .def164 .def56))
(define-fun .def166 () Bool (and .def165 .def53))
(define-fun .def167 () Bool (and .def166 .def50))
(define-fun .def168 () Bool (and .def167 .def48))
(define-fun .def169 () Bool (and .def168 .def46))
(define-fun .def170 () Bool (and .def169 .def44))
(define-fun .def171 () Bool (and .def170 .def42))
(define-fun .def172 () Bool (and .def171 .def40))
(define-fun .def173 () Bool (and .def172 .def38))
(define-fun .def174 () Bool (and .def173 .def36))
(define-fun .def175 () Bool (and .def174 .def34))
(define-fun .def176 () Bool (! .def175 :trans true))
; property
(define-fun .def177 () Bool (and .def28 .def30 .def27))
(define-fun .def178 () Bool (! .def177 :invar-property 0))
(assert true)
