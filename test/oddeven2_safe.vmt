; RUN: euforia %s | OutputCheckSmt2 %s
; CHECK: ^true\(unreach-call\)$
; filename: "oddeven2_safe.c"
(set-info :source |Printed by VMT_Standalone 0.1 [taco]|)
; state variable decarations
(declare-fun @L4* () Bool)
(declare-fun @L4*+ () Bool)
(declare-fun @L3* () Bool)
(declare-fun @L3*+ () Bool)
(declare-fun %call-main* () (_ BitVec 32))
(declare-fun %call-main*+ () (_ BitVec 32))
(declare-fun @L0* () Bool)
(declare-fun @L0*+ () Bool)
; aux variable declarations
(declare-fun %cmp2-main () Bool)
(declare-fun %rem1-main () (_ BitVec 32))
(declare-fun %add.call-main () (_ BitVec 32))
(declare-fun @L1 () Bool)
(declare-fun @L2 () Bool)
(declare-fun %add-main () (_ BitVec 32))
(declare-fun %cmp-main () Bool)
(declare-fun %rem-main () (_ BitVec 32))
; input variable decarations
(declare-fun call-$Y32-0 () (_ BitVec 32))
; :next defs for state vars
(define-fun .def0 () Bool (! @L4* :next @L4*+))
(define-fun .def1 () Bool (! @L3* :next @L3*+))
(define-fun .def2 () (_ BitVec 32) (! %call-main* :next %call-main*+))
(define-fun .def3 () Bool (! @L0* :next @L0*+))
; initial state
(define-fun .def4 () Bool (= %call-main* #x00000000))
(define-fun .def5 () Bool (not @L3*))
(define-fun .def6 () Bool (not @L4*))
(define-fun .def7 () Bool (and @L0* .def6 .def5 .def4))
(define-fun .def8 () Bool (! .def7 :init true))
; transition relation
(define-fun .def9 () Bool (= %call-main*+ %call-main*))
(define-fun .def10 () Bool (or @L1 .def9))
(define-fun .def11 () Bool (or @L2 @L4*))
(define-fun .def12 () Bool (= @L4*+ .def11))
(define-fun .def13 () Bool (not %cmp2-main))
(define-fun .def14 () Bool (and @L1 .def13))
(define-fun .def15 () Bool (or .def14 @L3*))
(define-fun .def16 () Bool (= @L3*+ .def15))
(define-fun .def17 () Bool (and @L1 %cmp2-main))
(define-fun .def18 () Bool (= @L2 .def17))
(define-fun .def19 () Bool (= %call-main*+ call-$Y32-0))
(define-fun .def20 () Bool (not @L1))
(define-fun .def21 () Bool (or .def20 .def19))
(define-fun .def22 () Bool (= %rem-main #x00000000))
(define-fun .def23 () Bool (not .def22))
(define-fun .def24 () Bool (= %cmp-main .def23))
(define-fun .def25 () (_ BitVec 1) ((_ extract 0 0) %call-main*))
(define-fun .def26 () (_ BitVec 1) ((_ extract 0 0) call-$Y32-0))
(define-fun .def27 () (_ BitVec 1) (ite @L1 .def26 .def25))
(define-fun .def28 () (_ BitVec 32) (concat #b0000000000000000000000000000000 .def27))
(define-fun .def29 () Bool (= %rem-main .def28))
(define-fun .def30 () Bool (= %rem1-main #x00000000))
(define-fun .def31 () Bool (= %cmp2-main .def30))
(define-fun .def32 () (_ BitVec 32) (ite @L1 call-$Y32-0 %call-main*))
(define-fun .def33 () (_ BitVec 32) (ite %cmp-main %add-main .def32))
(define-fun .def34 () Bool (= %add.call-main .def33))
(define-fun .def35 () (_ BitVec 32) (bvadd #x00000001 .def32))
(define-fun .def36 () Bool (= %add-main .def35))
(define-fun .def37 () (_ BitVec 1) ((_ extract 0 0) %add.call-main))
(define-fun .def38 () (_ BitVec 32) (concat #b0000000000000000000000000000000 .def37))
(define-fun .def39 () Bool (= %rem1-main .def38))
(define-fun .def40 () Bool (= @L1 @L0*))
(define-fun .def41 () Bool (not @L0*+))
(define-fun .def42 () Bool (and .def41 .def40))
(define-fun .def43 () Bool (and .def42 .def39))
(define-fun .def44 () Bool (and .def43 .def36))
(define-fun .def45 () Bool (and .def44 .def34))
(define-fun .def46 () Bool (and .def45 .def31))
(define-fun .def47 () Bool (and .def46 .def29))
(define-fun .def48 () Bool (and .def47 .def24))
(define-fun .def49 () Bool (and .def48 .def21))
(define-fun .def50 () Bool (and .def49 .def18))
(define-fun .def51 () Bool (and .def50 .def16))
(define-fun .def52 () Bool (and .def51 .def12))
(define-fun .def53 () Bool (and .def52 .def10))
(define-fun .def54 () Bool (! .def53 :trans true))
; property
(define-fun .def55 () Bool (! .def5 :invar-property 0))
(assert true)
