; RUN: euforia %s | OutputCheckSmt2 %s
; CHECK: ^true\(unreach-call\)$
(set-info :source "Seahorn-VMT")
; 6 state variables
; (including 4 locations)
(set-info :num-calls "0")
(set-info :num-functions "0")
(declare-fun main@%sm8 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%sm8+ () (Array (_ BitVec 64) (_ BitVec 64)))
(define-fun .def0 () (Array (_ BitVec 64) (_ BitVec 64)) (! main@%sm8 :next main@%sm8+))
(declare-fun main@%b () (_ BitVec 64))
(declare-fun main@%b+ () (_ BitVec 64))
(define-fun .def2 () (_ BitVec 64) (! main@%b :next main@%b+))
(declare-fun main@entry () Bool)
(declare-fun main@entry+ () Bool)
(define-fun .def3 () Bool (! main@entry :next main@entry+))
(declare-fun main@_13 () Bool)
(declare-fun main@_13+ () Bool)
(define-fun .def4 () Bool (! main@_13 :next main@_13+))
(declare-fun main@verifier.error () Bool)
(declare-fun main@verifier.error+ () Bool)
(define-fun .def5 () Bool (! main@verifier.error :next main@verifier.error+))
(declare-fun main@verifier.error.split () Bool)
(declare-fun main@verifier.error.split+ () Bool)
(define-fun .def8 () Bool (! main@verifier.error.split :next main@verifier.error.split+))
; 40 inputs
(declare-fun main@%_14_0 () (_ BitVec 32))
(declare-fun main@%_15_0 () Bool)
(declare-fun @llvm.used_0 () (_ BitVec 64))
(declare-fun main@%sm10_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%sm11_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%a_0 () (_ BitVec 64))
(declare-fun main@%sm_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%sm1_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%sm2_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%sm3_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%_0_0 () (_ BitVec 32))
(declare-fun main@%_1_0 () (_ BitVec 32))
(declare-fun main@%sm4_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%_2_0 () (_ BitVec 32))
(declare-fun main@%_3_0 () (_ BitVec 32))
(declare-fun main@%sm5_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%_4_0 () (_ BitVec 32))
(declare-fun main@%_5_0 () (_ BitVec 32))
(declare-fun main@%sm6_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%_6_0 () (_ BitVec 32))
(declare-fun main@%_7_0 () (_ BitVec 32))
(declare-fun main@%sm7_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%_8_0 () (_ BitVec 32))
(declare-fun main@%_9_0 () (_ BitVec 32))
(declare-fun main@%_10_0 () (_ BitVec 32))
(declare-fun main@%_11_0 () (_ BitVec 32))
(declare-fun main@%sm9_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun main@%_12_0 () Bool)
(declare-fun main@%b_0 () (_ BitVec 64))
(declare-fun main@%sm8_0 () (Array (_ BitVec 64) (_ BitVec 64)))
(declare-fun .cond1 () Bool)
(declare-fun .cond6 () Bool)
(declare-fun .cond7 () Bool)
(declare-fun .cond9 () Bool)
(declare-fun .cmdr0 () Bool)
; transitions
(define-fun .def10 () Bool
  (= main@%sm8+ (ite .cond1 main@%sm8_0 main@%sm8)))

(define-fun .def11 () Bool
  (= main@%b+ (ite .cond1 main@%b_0 main@%b)))

(define-fun .def12 () Bool
  (= main@entry+ (ite true false false)))

(define-fun .def13 () Bool
  (= main@_13+ (ite .cond1 true false)))

(define-fun .def14 () Bool
  (= main@verifier.error+ (ite .cond7 true (ite .cond6 true false))))

(define-fun .def15 () Bool
  (= main@verifier.error.split+ (ite .cond9 true false)))

(define-fun .def16 () Bool
  (=> .cond1 (and main@entry
     true
     (bvugt @llvm.used_0 #x0000000000000000)
     (bvugt main@%a_0 #x0000000000000000)
     (= main@%sm_0
        (store main@%sm11_0 main@%a_0 ((_ zero_extend 32) #x00000000)))
     (bvugt main@%b_0 #x0000000000000000)
     (= main@%sm1_0
        (store main@%sm10_0 main@%b_0 ((_ zero_extend 32) #x00000000)))
     (= main@%sm2_0
        (store main@%sm_0 main@%a_0 ((_ zero_extend 32) #x00000000)))
     (= main@%sm3_0
        (store main@%sm1_0 main@%b_0 ((_ zero_extend 32) #x00000000)))
     (= main@%_0_0 ((_ extract 31 0) (select main@%sm2_0 main@%a_0)))
     (= main@%_1_0 (bvadd main@%_0_0 #x00000001))
     (= main@%sm4_0
        (store main@%sm2_0 main@%a_0 ((_ zero_extend 32) main@%_1_0)))
     (= main@%_2_0 ((_ extract 31 0) (select main@%sm3_0 main@%b_0)))
     (= main@%_3_0 (bvadd main@%_2_0 #x00000001))
     (= main@%sm5_0
        (store main@%sm3_0 main@%b_0 ((_ zero_extend 32) main@%_3_0)))
     (= main@%_4_0 ((_ extract 31 0) (select main@%sm4_0 main@%a_0)))
     (= main@%_5_0 (bvadd main@%_4_0 #x00000001))
     (= main@%sm6_0
        (store main@%sm4_0 main@%a_0 ((_ zero_extend 32) main@%_5_0)))
     (= main@%_6_0 ((_ extract 31 0) (select main@%sm6_0 main@%a_0)))
     (= main@%_7_0 (bvadd main@%_6_0 #x00000001))
     (= main@%sm7_0
        (store main@%sm6_0 main@%a_0 ((_ zero_extend 32) main@%_7_0)))
     (= main@%_8_0 ((_ extract 31 0) (select main@%sm5_0 main@%b_0)))
     (= main@%_9_0 (bvadd main@%_8_0 #x00000001))
     (= main@%sm8_0
        (store main@%sm5_0 main@%b_0 ((_ zero_extend 32) main@%_9_0)))
     (= main@%_10_0 ((_ extract 31 0) (select main@%sm7_0 main@%a_0)))
     (= main@%_11_0 (bvadd main@%_10_0 #x00000001))
     (= main@%sm9_0
        (store main@%sm7_0 main@%a_0 ((_ zero_extend 32) main@%_11_0)))
     (= main@%_12_0 (= main@%_11_0 #x00000004))
     main@%_12_0)))

(define-fun .def17 () Bool
  (=> .cond6 (and main@entry
     true
     (bvugt @llvm.used_0 #x0000000000000000)
     (bvugt main@%a_0 #x0000000000000000)
     (= main@%sm_0
        (store main@%sm11_0 main@%a_0 ((_ zero_extend 32) #x00000000)))
     (bvugt main@%b_0 #x0000000000000000)
     (= main@%sm1_0
        (store main@%sm10_0 main@%b_0 ((_ zero_extend 32) #x00000000)))
     (= main@%sm2_0
        (store main@%sm_0 main@%a_0 ((_ zero_extend 32) #x00000000)))
     (= main@%sm3_0
        (store main@%sm1_0 main@%b_0 ((_ zero_extend 32) #x00000000)))
     (= main@%_0_0 ((_ extract 31 0) (select main@%sm2_0 main@%a_0)))
     (= main@%_1_0 (bvadd main@%_0_0 #x00000001))
     (= main@%sm4_0
        (store main@%sm2_0 main@%a_0 ((_ zero_extend 32) main@%_1_0)))
     (= main@%_2_0 ((_ extract 31 0) (select main@%sm3_0 main@%b_0)))
     (= main@%_3_0 (bvadd main@%_2_0 #x00000001))
     (= main@%sm5_0
        (store main@%sm3_0 main@%b_0 ((_ zero_extend 32) main@%_3_0)))
     (= main@%_4_0 ((_ extract 31 0) (select main@%sm4_0 main@%a_0)))
     (= main@%_5_0 (bvadd main@%_4_0 #x00000001))
     (= main@%sm6_0
        (store main@%sm4_0 main@%a_0 ((_ zero_extend 32) main@%_5_0)))
     (= main@%_6_0 ((_ extract 31 0) (select main@%sm6_0 main@%a_0)))
     (= main@%_7_0 (bvadd main@%_6_0 #x00000001))
     (= main@%sm7_0
        (store main@%sm6_0 main@%a_0 ((_ zero_extend 32) main@%_7_0)))
     (= main@%_8_0 ((_ extract 31 0) (select main@%sm5_0 main@%b_0)))
     (= main@%_9_0 (bvadd main@%_8_0 #x00000001))
     (= main@%sm8_0
        (store main@%sm5_0 main@%b_0 ((_ zero_extend 32) main@%_9_0)))
     (= main@%_10_0 ((_ extract 31 0) (select main@%sm7_0 main@%a_0)))
     (= main@%_11_0 (bvadd main@%_10_0 #x00000001))
     (= main@%sm9_0
        (store main@%sm7_0 main@%a_0 ((_ zero_extend 32) main@%_11_0)))
     (= main@%_12_0 (= main@%_11_0 #x00000004))
     (not main@%_12_0))))

(define-fun .def18 () Bool
  (=> .cond7 (and main@_13
     true
     (= main@%_14_0 ((_ extract 31 0) (select main@%sm8 main@%b)))
     (= main@%_15_0 (= main@%_14_0 #x00000002))
     (not main@%_15_0))))

(define-fun .def19 () Bool
  (=> .cond9 (and main@verifier.error true)))

(define-fun .one-hot-cond () Bool
  (and (or (not .cond1) (not .cond6))
     (or (not .cond1) (not .cond7))
     (or (not .cond1) (not .cond9))
     (or (not .cond1) (not (not .cmdr0)))
     (or (not .cond6) (not .cond7))
     (or (not .cond6) (not .cond9))
     (or (not .cond6) (not (not .cmdr0)))
     (or (not .cond7) (not .cond9))
     (or (not .cond7) (not (not .cmdr0)))
     (or (not .cond9) (not (not .cmdr0)))
     true))
(define-fun .trans () Bool
  (! (and .one-hot-cond .def10 .def11 .def12 .def13 .def14 .def15 .def16 .def17 .def18 .def19) :trans true))
; initial state
(define-fun .def20 () Bool (! (and main@entry (not main@_13) (not main@verifier.error) (not main@verifier.error.split)) :init true))
; property
(define-fun .def21 () Bool (! (not main@verifier.error.split) :invar-property 0))
