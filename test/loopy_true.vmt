; RUN: euforia %s | OutputCheckSmt2 %s
; CHECK: ^false\(unreach-call\)$
; filename: "loopy_true.c"
(set-info :source |Printed by VMT_Standalone 0.1 [taco]|)
; state variable decarations
(declare-fun %y.0-main* () (_ BitVec 32))
(declare-fun %y.0-main*+ () (_ BitVec 32))
(declare-fun @L8* () Bool)
(declare-fun @L8*+ () Bool)
(declare-fun @L7* () Bool)
(declare-fun @L7*+ () Bool)
(declare-fun @L0* () Bool)
(declare-fun @L0*+ () Bool)
(declare-fun %call-main* () (_ BitVec 32))
(declare-fun %call-main*+ () (_ BitVec 32))
(declare-fun @L2* () Bool)
(declare-fun @L2*+ () Bool)
; aux variable declarations
(declare-fun %cmp.-main () Bool)
(declare-fun %add.y.0-main () (_ BitVec 32))
(declare-fun %cmp1-main () Bool)
(declare-fun %tobool-main () Bool)
(declare-fun %add-main () (_ BitVec 32))
(declare-fun @L3 () Bool)
(declare-fun %cmp2-main () Bool)
(declare-fun @L1 () Bool)
(declare-fun %cmp-main () Bool)
(declare-fun @L6 () Bool)
(declare-fun @L5 () Bool)
(declare-fun @L4 () Bool)
; input variable decarations
(declare-fun call-$Y32-0 () (_ BitVec 32))
; :next defs for state vars
(define-fun .def0 () (_ BitVec 32) (! %y.0-main* :next %y.0-main*+))
(define-fun .def1 () Bool (! @L8* :next @L8*+))
(define-fun .def2 () Bool (! @L7* :next @L7*+))
(define-fun .def3 () Bool (! @L0* :next @L0*+))
(define-fun .def4 () (_ BitVec 32) (! %call-main* :next %call-main*+))
(define-fun .def5 () Bool (! @L2* :next @L2*+))
; initial state
(define-fun .def6 () Bool (= %call-main* #x00000000))
(define-fun .def7 () Bool (= %y.0-main* #x00000000))
(define-fun .def8 () Bool (not @L2*))
(define-fun .def9 () Bool (not @L7*))
(define-fun .def10 () Bool (not @L8*))
(define-fun .def11 () Bool (and @L0* .def10 .def9 .def8 .def7 .def6))
(define-fun .def12 () Bool (! .def11 :init true))
; transition relation
(define-fun .def13 () Bool (= %call-main*+ %call-main*))
(define-fun .def14 () Bool (or @L3 .def13))
(define-fun .def15 () Bool (= %y.0-main*+ %y.0-main*))
(define-fun .def16 () Bool (or @L2*+ .def15))
(define-fun .def17 () Bool (or @L6 @L8*))
(define-fun .def18 () Bool (= @L8*+ .def17))
(define-fun .def19 () Bool (not %cmp2-main))
(define-fun .def20 () Bool (and @L5 .def19))
(define-fun .def21 () Bool (or .def20 @L7*))
(define-fun .def22 () Bool (= @L7*+ .def21))
(define-fun .def23 () Bool (and @L5 %cmp2-main))
(define-fun .def24 () Bool (= @L6 .def23))
(define-fun .def25 () Bool (bvsle #x00000000 %y.0-main*))
(define-fun .def26 () Bool (= %cmp2-main .def25))
(define-fun .def27 () Bool (not %cmp.-main))
(define-fun .def28 () Bool (and @L3 .def27))
(define-fun .def29 () Bool (= @L5 .def28))
(define-fun .def30 () (_ BitVec 32) (ite @L3 call-$Y32-0 %call-main*))
(define-fun .def31 () Bool (bvsle .def30 #x00000000))
(define-fun .def32 () Bool (not .def31))
(define-fun .def33 () Bool (= %cmp1-main .def32))
(define-fun .def34 () (_ BitVec 32) (bvadd %y.0-main* .def30))
(define-fun .def35 () Bool (= %add-main .def34))
(define-fun .def36 () (_ BitVec 32) (ite %cmp1-main %add-main %y.0-main*))
(define-fun .def37 () Bool (= %add.y.0-main .def36))
(define-fun .def38 () Bool (and @L3 %cmp.-main))
(define-fun .def39 () Bool (= @L4 .def38))
(define-fun .def40 () Bool (= %call-main*+ call-$Y32-0))
(define-fun .def41 () Bool (not @L3))
(define-fun .def42 () Bool (or .def41 .def40))
(define-fun .def43 () Bool (bvsle #x00001000 %y.0-main*))
(define-fun .def44 () Bool (not .def43))
(define-fun .def45 () Bool (= %cmp-main .def44))
(define-fun .def46 () Bool (= .def30 #x00000000))
(define-fun .def47 () Bool (not .def46))
(define-fun .def48 () Bool (= %tobool-main .def47))
(define-fun .def49 () Bool (and %tobool-main %cmp-main))
(define-fun .def50 () Bool (= %cmp.-main .def49))
(define-fun .def51 () Bool (= @L3 @L2*))
(define-fun .def52 () (_ BitVec 32) (ite @L1 #x00000000 %add.y.0-main))
(define-fun .def53 () Bool (= %y.0-main*+ .def52))
(define-fun .def54 () Bool (not @L2*+))
(define-fun .def55 () Bool (or .def54 .def53))
(define-fun .def56 () Bool (or @L1 @L4))
(define-fun .def57 () Bool (= @L2*+ .def56))
(define-fun .def58 () Bool (= @L1 @L0*))
(define-fun .def59 () Bool (not @L0*+))
(define-fun .def60 () Bool (and .def59 .def58))
(define-fun .def61 () Bool (and .def60 .def57))
(define-fun .def62 () Bool (and .def61 .def55))
(define-fun .def63 () Bool (and .def62 .def51))
(define-fun .def64 () Bool (and .def63 .def50))
(define-fun .def65 () Bool (and .def64 .def48))
(define-fun .def66 () Bool (and .def65 .def45))
(define-fun .def67 () Bool (and .def66 .def42))
(define-fun .def68 () Bool (and .def67 .def39))
(define-fun .def69 () Bool (and .def68 .def37))
(define-fun .def70 () Bool (and .def69 .def35))
(define-fun .def71 () Bool (and .def70 .def33))
(define-fun .def72 () Bool (and .def71 .def29))
(define-fun .def73 () Bool (and .def72 .def26))
(define-fun .def74 () Bool (and .def73 .def24))
(define-fun .def75 () Bool (and .def74 .def22))
(define-fun .def76 () Bool (and .def75 .def18))
(define-fun .def77 () Bool (and .def76 .def16))
(define-fun .def78 () Bool (and .def77 .def14))
(define-fun .def79 () Bool (! .def78 :trans true))
; property
(define-fun .def80 () Bool (! .def9 :invar-property 0))
(assert true)
