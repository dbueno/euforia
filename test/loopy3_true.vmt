; RUN: euforia %s | OutputCheckSmt2 %s
; CHECK: ^true\(unreach-call\)$
; filename: "loopy3_false.c"
(set-info :source |Printed by VMT_Standalone 0.1 [taco]|)
; state variable decarations
(declare-fun %y.0.i-main* () (_ BitVec 32))
(declare-fun %y.0.i-main*+ () (_ BitVec 32))
(declare-fun %call1.i-main* () (_ BitVec 32))
(declare-fun %call1.i-main*+ () (_ BitVec 32))
(declare-fun %argc-main* () (_ BitVec 32))
(declare-fun %argc-main*+ () (_ BitVec 32))
(declare-fun @L6* () Bool)
(declare-fun @L6*+ () Bool)
(declare-fun %call.i-main* () (_ BitVec 32))
(declare-fun %call.i-main*+ () (_ BitVec 32))
(declare-fun @L0* () Bool)
(declare-fun @L0*+ () Bool)
(declare-fun %argv-main* () (_ BitVec 32))
(declare-fun %argv-main*+ () (_ BitVec 32))
(declare-fun @L2* () Bool)
(declare-fun @L2*+ () Bool)
; aux variable declarations
(declare-fun %conv.i-main () (_ BitVec 32))
(declare-fun %cmp.i-main () Bool)
(declare-fun @L5 () Bool)
(declare-fun %tobool.i-main () Bool)
(declare-fun %add.i-main () (_ BitVec 32))
(declare-fun @L4 () Bool)
(declare-fun @L3 () Bool)
(declare-fun @L1 () Bool)
; input variable decarations
(declare-fun call.i-$Y32-1 () (_ BitVec 32))
(declare-fun call1.i-$Y32-0 () (_ BitVec 32))
; :next defs for state vars
(define-fun .def0 () (_ BitVec 32) (! %y.0.i-main* :next %y.0.i-main*+))
(define-fun .def1 () (_ BitVec 32) (! %call1.i-main* :next %call1.i-main*+))
(define-fun .def2 () (_ BitVec 32) (! %argc-main* :next %argc-main*+))
(define-fun .def3 () Bool (! @L6* :next @L6*+))
(define-fun .def4 () (_ BitVec 32) (! %call.i-main* :next %call.i-main*+))
(define-fun .def5 () Bool (! @L0* :next @L0*+))
(define-fun .def6 () (_ BitVec 32) (! %argv-main* :next %argv-main*+))
(define-fun .def7 () Bool (! @L2* :next @L2*+))
; initial state
(define-fun .def8 () Bool (= %argc-main* #x00000000))
(define-fun .def9 () Bool (= %argv-main* #x00000000))
(define-fun .def10 () Bool (= %y.0.i-main* #x00000000))
(define-fun .def11 () Bool (= %call1.i-main* #x00000000))
(define-fun .def12 () Bool (= %call.i-main* #x00000000))
(define-fun .def13 () Bool (not @L2*))
(define-fun .def14 () Bool (not @L6*))
(define-fun .def15 () Bool (and @L0* .def14 .def13 .def12 .def11 .def10 .def9 .def8))
(define-fun .def16 () Bool (! .def15 :init true))
; transition relation
(define-fun .def17 () Bool (= %argc-main*+ %argc-main*))
(define-fun .def18 () Bool (= %call1.i-main*+ %call1.i-main*))
(define-fun .def19 () Bool (or @L5 .def18))
(define-fun .def20 () Bool (= %call.i-main*+ %call.i-main*))
(define-fun .def21 () Bool (or @L3 .def20))
(define-fun .def22 () Bool (= %argv-main*+ %argv-main*))
(define-fun .def23 () Bool (= %y.0.i-main*+ %y.0.i-main*))
(define-fun .def24 () Bool (or @L2*+ .def23))
(define-fun .def25 () Bool (or @L5 @L6*))
(define-fun .def26 () Bool (= @L6*+ .def25))
(define-fun .def27 () Bool (bvsle %y.0.i-main* #x00000000))
(define-fun .def28 () Bool (not .def27))
(define-fun .def29 () Bool (= %cmp.i-main .def28))
(define-fun .def30 () (_ BitVec 32) (ite %cmp.i-main #x00000001 #x00000000))
(define-fun .def31 () Bool (= %conv.i-main .def30))
(define-fun .def32 () Bool (= %call1.i-main*+ call1.i-$Y32-0))
(define-fun .def33 () Bool (not @L5))
(define-fun .def34 () Bool (or .def33 .def32))
(define-fun .def35 () Bool (not %tobool.i-main))
(define-fun .def36 () Bool (and @L3 .def35))
(define-fun .def37 () Bool (= @L5 .def36))
(define-fun .def38 () (_ BitVec 32) (ite @L3 call.i-$Y32-1 %call.i-main*))
(define-fun .def39 () (_ BitVec 32) (bvadd %y.0.i-main* .def38))
(define-fun .def40 () Bool (= %add.i-main .def39))
(define-fun .def41 () Bool (and @L3 %tobool.i-main))
(define-fun .def42 () Bool (= @L4 .def41))
(define-fun .def43 () Bool (= %call.i-main*+ call.i-$Y32-1))
(define-fun .def44 () Bool (not @L3))
(define-fun .def45 () Bool (or .def44 .def43))
(define-fun .def46 () Bool (= .def38 #x00000000))
(define-fun .def47 () Bool (not .def46))
(define-fun .def48 () Bool (= %tobool.i-main .def47))
(define-fun .def49 () Bool (= @L3 @L2*))
(define-fun .def50 () (_ BitVec 32) (ite @L1 #x00000000 %add.i-main))
(define-fun .def51 () Bool (= %y.0.i-main*+ .def50))
(define-fun .def52 () Bool (not @L2*+))
(define-fun .def53 () Bool (or .def52 .def51))
(define-fun .def54 () Bool (or @L1 @L4))
(define-fun .def55 () Bool (= @L2*+ .def54))
(define-fun .def56 () Bool (= @L1 @L0*))
(define-fun .def57 () Bool (not @L0*+))
(define-fun .def58 () Bool (and .def57 .def56))
(define-fun .def59 () Bool (and .def58 .def55))
(define-fun .def60 () Bool (and .def59 .def53))
(define-fun .def61 () Bool (and .def60 .def49))
(define-fun .def62 () Bool (and .def61 .def48))
(define-fun .def63 () Bool (and .def62 .def45))
(define-fun .def64 () Bool (and .def63 .def42))
(define-fun .def65 () Bool (and .def64 .def40))
(define-fun .def66 () Bool (and .def65 .def37))
(define-fun .def67 () Bool (and .def66 .def34))
(define-fun .def68 () Bool (and .def67 .def31))
(define-fun .def69 () Bool (and .def68 .def29))
(define-fun .def70 () Bool (and .def69 .def26))
(define-fun .def71 () Bool (and .def70 .def24))
(define-fun .def72 () Bool (and .def71 .def22))
(define-fun .def73 () Bool (and .def72 .def21))
(define-fun .def74 () Bool (and .def73 .def19))
(define-fun .def75 () Bool (and .def74 .def17))
(define-fun .def76 () Bool (! .def75 :trans true))
; property
(define-fun .def77 () Bool (! true :invar-property 0))
(assert true)
